{"version":3,"sources":["../../../../src/thegamma/ast/errors.fs"],"names":[],"mappings":"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","file":"errors.js","sourceRoot":"C:/Tomas/Public/thegamma/thegamma-script/out/src/thegamma","sourcesContent":["ï»¿module TheGamma.Errors\r\nopen TheGamma.Ast\r\n\r\nmodule Tokenizer = \r\n  let inputEndInsideString rng s =\r\n    { Number = 101; Range = rng; Message = sprintf \"Missing \\\" at the end of the input. The string \\\"%s\\\" ends without closing double-quote.\" s }\r\n  let missingClosingQuote rng q = \r\n    { Number = 102; Range = rng; Message = sprintf \"Quoted identifier '%s' is missing closing quote.\" q }\r\n  let unexpectedCharacter rng (c:char) =\r\n    { Number = 103; Range = rng; Message = sprintf \"Unexcpected character '%s' in the input.\" (string c) }\r\n\r\nmodule Parser = \r\n  let unexpectedTokenAfterDot rng tok =\r\n    { Number = 201; Range = rng; Message = sprintf \"Unexpected %s after '.' in method chain\" (formatTokenInfo tok) }\r\n\r\n  let unexpectedScopeEndAfterDot rng chainRng tok =\r\n    { Number = 202; Range = rng; Message = sprintf \"Unexpected end of scope after '.' in method chain before %s\" (formatTokenInfo tok) }\r\n\r\n  let unindentedIdentifierAfterDot rng chainRng id =\r\n    { Number = 203; Range = rng; Message = sprintf \"Unexpected end of scope after '.' and before '%s'. Indent the identifier?\" id }\r\n\r\n  let unindentedDotAfterIdentifier rng dotRng =\r\n    { Number = 204; Range = rng; Message = \"Dot after this identifier is not correctly nested\" }\r\n\r\n  let unindentedBlock rng tok =\r\n    { Number = 205; Range = rng; Message = sprintf \"Token following %s needs to be indented further\" (formatTokenInfo tok) }\r\n\r\n  let unexpectedTokenAfterOperator rng op tok =\r\n    { Number = 206; Range = rng; Message = sprintf \"Unexpected token '%s' after operator '%s'\" (formatTokenInfo tok) (formatTokenInfo op) }\r\n\r\n  let unexpectedTokenInArgList rng tok =\r\n    { Number = 207; Range = rng; Message = sprintf \"Unexpected token '%s' in list of call arguments\" (formatTokenInfo tok) }\r\n\r\n  let unexpectedScopeEndInArgList rng =\r\n    { Number = 208; Range = rng; Message = \"Unexpected end of scope in argument list\" }\r\n\r\n  let unexpectedTokenInParenthesizedExpr rng tok =\r\n    { Number = 209; Range = rng; Message = sprintf \"Unexpected token '%s' in parenthesized expression. Are you missing ')'?\" (formatTokenInfo tok) }\r\n\r\n  let unindentedTokenInParenthesizedExpr rng =\r\n    { Number = 210; Range = rng; Message = \"Unexpected end of nested expression in `(`\" }\r\n\r\n  let missingParenthesizedExpr rng =\r\n    { Number = 211; Range = rng; Message = \"The parenthesized expression (...) is missing body!\" }\r\n\r\n  let unexpectedTokenInList rng tok =\r\n    { Number = 212; Range = rng; Message = sprintf \"Unexpected token '%s' in list expression\" (formatTokenInfo tok) }\r\n\r\n  let unexpectedScopeEndInList rng =\r\n    { Number = 213; Range = rng; Message = \"Unexpected end of scope in list expression\" }\r\n\r\n  let unexpectedTokenInLetBinding rng tok =\r\n    { Number = 214; Range = rng; Message = sprintf \"Unexpected token '%s' in let declaration (should be let name = expr)\" (formatTokenInfo tok) }\r\n\r\n  let missingBodyInLetBinding rng =\r\n    { Number = 215; Range = rng; Message = \"This let binding is missing body after equals\" }\r\n\r\n  let nestedExpressionInCommand rng =\r\n    { Number = 216; Range = rng; Message = \"Unexpected expression\" }\r\n\r\n  let unexpectedTokenAfterFun rng tok =\r\n    { Number = 217; Range = rng; Message = sprintf \"Unexpected token '%s' after `fun`. Expected variable name.\" (formatTokenInfo tok) }\r\n\r\n  let missingArrowInFunc rng =\r\n    { Number = 218; Range = rng; Message = \"Missing arrow after variable in function definition\" }\r\n\r\n  let unexpectedScopeEndInFunc rng =\r\n    { Number = 219; Range = rng; Message = \"Unexpected end of scope in function declaration\" }\r\n\r\n  let missingBodyOfFunc rng =\r\n    { Number = 220; Range = rng; Message = \"The function is missing body. If it is on the next line, you need to indent it further.\" }\r\n\r\n  let exceptionWhileParsing rng msg = \r\n    { Number = 299; Range = rng; Message = \"Unexpected exception while parsing: \" + msg }\r\n\r\n    \r\nmodule TypeChecker = \r\n  let numericOperatorExpectsNumbers op idx typ rng =\r\n    { Number = 301; Range = rng \r\n      Message = \r\n        sprintf \"Both operands of binary operator '%s' should be numbers but the %s operand was %s instead.\" \r\n          (formatToken (TokenKind.Operator op)) (if idx = 0 then \"left\" else \"right\") (formatTypeInfo typ) }\r\n\r\n  let variableNotInScope name rng =\r\n    { Number = 302; Range = rng \r\n      Message = sprintf \"Variable '%s' is not in scope.\" name }\r\n\r\n  let private formatMembers members = \r\n    [ for Member.Method(name=n) | Member.Property(name=n) in members -> n ] \r\n    |> String.concat \", \" \r\n\r\n  let propertyMissing name members rng = \r\n    { Number = 303; Range = rng \r\n      Message = sprintf \"Could not find property '%s' in the list '%s'.\" name (formatMembers members) }\r\n\r\n  let methodMissing name members rng = \r\n    { Number = 304; Range = rng \r\n      Message = sprintf \"Could not find method '%s' in the list '%s'.\" name (formatMembers members) }\r\n\r\n  let notAnObject name typ rng = \r\n    { Number = 305; Range = rng \r\n      Message = sprintf \"Type is not an object but %s and it does not have member `%s`\" (formatTypeInfo typ) name }\r\n\r\n  let listElementTypeDoesNotMatch listty elty rng = \r\n    { Number = 306; Range = rng \r\n      Message = sprintf \"The type of this list element is %s but it should be %s\" (formatTypeInfo elty) (formatTypeInfo listty) }\r\n\r\n  let nameBasedParamMustBeLast rng = \r\n    { Number = 307; Range = rng \r\n      Message = \"All named parameters must be at the end of parameter list.\" }\r\n\r\n  let parameterMissingValue par rng = \r\n    { Number = 308; Range = rng \r\n      Message = sprintf \"Required parameter `%s` is not given a value.\" par }\r\n\r\n  let incorrectParameterType parName parType actualType err1 err2 rng = \r\n    { Number = 309; Range = rng \r\n      Message = \r\n        sprintf \"The value of parameter `%s` has wrong type. Expected %s but got %s. The type %s does not match the type %s.\"\r\n          parName (formatTypeInfo parType) (formatTypeInfo actualType) (formatTypeInfo err1) (formatTypeInfo err2) }\r\n\r\n  let inferenceConflict var t1 t2 rng = \r\n    { Number = 310; Range = rng \r\n      Message = \r\n        sprintf \"The arguments of the call have conflicting types. The type %s assigned to a variable %s does not match the type %s.\"\r\n          (formatTypeInfo t1) var (formatTypeInfo t2) }\r\n\r\n  let callMissingInstance name rng = \r\n    { Number = 311; Range = rng \r\n      Message = sprintf \"The `%s` property access or call is missing an instance\" name }\r\n"]}