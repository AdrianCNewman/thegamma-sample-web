{"version":3,"sources":["../../../src/thegamma/errors.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAEO;AAFP,+DAII;AAAA;AAAA,qCAA8C,sHAAR;AAAA;AAAA,WAAtC;AAA4I,KAJhJ;;AAAA,6DAMI;AAAA;AAAA,qCAA8C,8EAAR;AAAA;AAAA,WAAtC;AAAoG,KANxG;;AAAA,6DAQI;AAAA;AAAA,qCAA8C,sEAAR;AAAA;AAAA,WAAtC;AAAqG,KARzG;;AAEO;AAFP,GAEO;;AAQA;AAVP,yDAYI;AAAA;AAAA,qCACoB,sFAAR;AAAA;AAAA,cADZ;AACqF,KAbzF;;AAAA,qDAgBI;AAAA;AAAA;AAA0D,KAhB9D;;AAAA,6DAmBI;AAAA;AAAA;AAA2D,KAnB/D;;AAAA,qDAsBI;AAAA;AAAA;AAA0E,KAtB9E;;AAAA,yDAyBI;AAAA;AAAA;AAAoE,KAzBxE;;AAAA,+DA4BI;AAAA;AAAA;AAA2D,KA5B/D;;AAAA,qDA+BI;AAAA;AAAA;AAAsE,KA/B1E;;AAUO;AAVP,GAUO;;AAuBA;AAjCP,wBAoCO;AAAA,0CADH,sBAAE;AAAA,sCAAI;AAA2D;AAAA;AAAA;;AAAR,cAAnD,8BAAmD,EAAnD;AAAA;AAA+C,WAAI,MAAnD;AAAA;AAA+C;AAAA,SAAnD;AAAA,QAAF,CACG;AAAkB,KApCzB;;AAAA,2DAuCI;AAAA;AAAA,qCACoB,4DAAR;AAAA;AAAA,cADZ;AAC2D,KAxC/D;;AAAA,qDA2CI;AAAA;AAAA,qCACoB,4EAAR;AAAA;AAAA,eAA+D,sBAA/D,CADZ;AACmG,KA5CvG;;AAAA,iDA+CI;AAAA;AAAA,qCACoB,0EAAR;AAAA;AAAA,eAA6D,sBAA7D,CADZ;AACiG,KAhDrG;;AAAA,+DAmDI;AAAA;AAAA;AACwD,KApD5D;;AAAA,6CAuDI;AAAA;AAAA;AACsC,KAxD1C;;AAAA,uDA2DI;AAAA;AAAA;AACmC,KA5DvC;;AAAA,uEA+DI;AAAA;AAAA;AAC0E,KAhE9E;;AAiCO;AAjCP,GAiCO","file":"errors.js","sourceRoot":"c:/tomas/public/thegamma/thegamma-script/out/src/thegamma","sourcesContent":["ï»¿module TheGamma.Errors\r\n\r\nmodule Tokenizer = \r\n  let inputEndInsideString rng s =\r\n    { Number = 11; Range = rng; Message = sprintf \"Missing \\\" at the end of the input. The string \\\"%s\\\" ends without closing double-quote.\" s }\r\n  let missingClosingQuote rng q = \r\n    { Number = 12; Range = rng; Message = sprintf \"Quoted identifier '%s' is missing closing quote.\" q }\r\n  let unexpectedCharacter rng (c:char) =\r\n    { Number = 13; Range = rng; Message = sprintf \"Unexcpected character '%s' in the input.\" (string c) }\r\n\r\nmodule Parser = \r\n  let valueNotAfunction rng name =\r\n    { Number = 21; Range = rng \r\n      Message = sprintf \"Global value '%s' is not a function. Ignoring arguments.\" name }\r\n\r\n  let emptyIdentifier rng =\r\n    { Number = 22; Range = rng; Message = \"Empty identifier\" }\r\n\r\n  let missingClosingParen rng =\r\n    { Number = 23; Range = rng; Message = \"Missing closing )\" }\r\n\r\n  let nothingAfterDot rng =\r\n    { Number = 24; Range = rng; Message = \"Call chain should not end with .\" }\r\n\r\n  let nothingAfterComma rng =\r\n    { Number = 25; Range = rng; Message = \"List should not end with ,\" }\r\n\r\n  let missingClosingSquare rng =\r\n    { Number = 26; Range = rng; Message = \"Missing closing ]\" }\r\n\r\n  let incompleteRange rng =\r\n    { Number = 27; Range = rng; Message = \"Incomeplete range expression\" }\r\n\r\nmodule TypeChecker = \r\n  let private formatMembers members = \r\n    [ for Member.Method(name=n) | Member.Property(name=n) in members -> n ] \r\n    |> String.concat \", \" \r\n\r\n  let variableNotInScope rng name =\r\n    { Number = 31; Range = rng \r\n      Message = sprintf \"Variable '%s' is not in scope.\" name }\r\n  \r\n  let propertyMissing rng name members = \r\n    { Number = 32; Range = rng \r\n      Message = sprintf \"Could not find property '%s' in the list '%s'.\" name (formatMembers members) }\r\n  \r\n  let methodMissing rng name members = \r\n    { Number = 33; Range = rng \r\n      Message = sprintf \"Could not find method '%s' in the list '%s'.\" name (formatMembers members) }\r\n\r\n  let mismatchingListTypes rng = \r\n    { Number = 33; Range = rng \r\n      Message = \"The types of list elements do not match.\" }\r\n\r\n  let notAnObject rng typ = \r\n    { Number = 34; Range = rng \r\n      Message = \"Type is not an object.\" }\r\n    \r\n  let cannotUnityTypes rng = \r\n    { Number = 35; Range = rng \r\n      Message = \"Cannot unify types.\" }\r\n\r\n  let nameBasedParamMustBeLast rng = \r\n    { Number = 36; Range = rng \r\n      Message = \"All named parameters must be at the end of parameter list.\" }\r\n"]}