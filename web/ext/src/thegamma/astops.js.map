{"version":3,"sources":["../../../src/thegamma/astops.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAGQ;AAWc;AAAA;AAAA;;AAXd,2BAEyB;AAAA,mDAAS,uCAAG,sBAAC;AAAA,kCAAiB;AAAA;AAAA,SAAjB;AAAA,QAAD,CAAH,CAAT,EAAyC,uCAAY,uBAAsB;AAAA;AAAA,OAAtB,cAAZ,CAAzC;AAAoF,KAF7G;AAAA,iCAGoB;AAAA,qDAAS,qBAAT,EAAa,sCAAb;AAAiB,OAHrC;AAAA,+BAIkB;AAAA,oEAAc,qBAAd;AAAiB,SAJnC;AAAA,qCAKuB;AAAA,yDAAS,sCAAT,EAAc,sCAAd;AAAkB,WALzC;AAAA;AAAA;AAAC,aAAD;AAAA;AAAA;AAAC,eAAD;AAAA;AAAA;AAAC,iBAAD;AAAA;AAAA;AAAC,mBAAD;AAAA;AAAA;AAAC,qBAAD;AAAA;AAAA;AAAC,uBAAD,MACuB;AAAA,qEAAS,sCAAT,EAAc,sCAAd;AAAkB;AADxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcD;AAAA;;AAayB;AAAA;AAAiD,KAAjD;;AACA;AAAA;AAAiD,KAAjD;;AACJ;AAAA;AAA6C,KAA7C;;AAEI;AAAA;AAAiD,KAAjD;;AAMN;AAAA;AAAsC,KAAtC;;AAvBnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE8B;AAFrB,aAAT;AAAA;AAAS;AAAA,WAAT;AAAA;AAAS;AAAA,SAAT;AAAA;AAAS;AAAA,OAAT;AAAA;AAAS;AAAA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGiC;AAHxB,eAAT;AAAA;AAAS;AAAA,aAAT;AAAA;AAAS;AAAA,WAAT;AAAA;AAAS;AAAA,SAAT;AAAA;AAAS;AAAA,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKF;AACQ;AAAA;AAAA;AAAA;;AAIC;AAAA;AAA6C,uBAA7C;;AAJD;AAAA;AAAA,4DAGU;AAAA;AAAE,2BAHZ;AAAA;AAAY;AAAA,yBAAZ;AAAA;AAAY;AAAA,uBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE8C,4FAA+B,+BAA/B;AAFlC,6BAAZ;AAAA;AAAY;AAAA,2BAAZ;AAAA;AAAY;AAAA,yBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACyC,2FAA6B,+BAA7B;AAD7B,2BAAZ;AAAA;AAAY;AAAA;AAAA;AAAA,qBAAZ;AAAA;AAAA;;AAKR,0DAAoB,6BAApB;AAA2C;AAXhC,aAAT;AAAA;AAAS;AAAA,WAAT;AAAA;AAAS;AAAA,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAY4B;AAZnB,iBAAT;AAAA;AAAS;AAAA,eAAT;AAAA;AAAS;AAAA,aAAT;AAAA;AAAS;AAAA,WAAT;AAAA;AAAA;AAAS,aAAT;AAAA;AAAA;AAAS,eAAT;AAAA;AAAA;AAAS,iBAAT;AAAA;AAAA;AAAS,mBAAT;AAAA;AAAA;AAAS,qBAAT;AAAA;AAAA;AAAS,uBAAT;AAAA;AAAA;AACyB;AADhB,yBAAT,MAgBqB;AAAA;AAA6C;AAhBzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","file":"astops.js","sourceRoot":"c:/tomas/public/thegamma/thegamma-script/out/src/thegamma","sourcesContent":["ï»¿module TheGamma.AstOperations\r\n\r\nlet (|ExprLeaf|ExprNode|) e = \r\n  match e with\r\n  | ExprKind.Property(e, n) -> ExprNode([e], [n])\r\n  | ExprKind.Call(e, n, args) -> ExprNode(e::[for a in args -> a.Value ], n::(args |> List.choose (fun a -> a.Name)))\r\n  | ExprKind.Variable(n) -> ExprNode([], [n])\r\n  | ExprKind.List(els) -> ExprNode(els, [])\r\n  | ExprKind.Function(n, b) -> ExprNode([b], [n])\r\n  | ExprKind.Number _\r\n  | ExprKind.Boolean _\r\n  | ExprKind.String _\r\n  | ExprKind.Unit\r\n  | ExprKind.Null\r\n  | ExprKind.Empty -> ExprLeaf()\r\n\r\nlet rebuildExprNode e es ns =\r\n  match e, es, ns with\r\n  | ExprKind.List(_), els, [] -> ExprKind.List(els)\r\n  | ExprKind.Function(_), [e], [n] -> ExprKind.Function(n, e)\r\n  | ExprKind.Property(_, _), [e], [n] -> ExprKind.Property(e, n)\r\n  | ExprKind.Call(_, _, args), e::es, n::ns ->\r\n      let rec rebuildArgs args es ns =\r\n        match args, es, ns with\r\n        | { Argument.Name = None }::args, e::es, ns -> { Value = e; Name = None }::(rebuildArgs args es ns)\r\n        | { Argument.Name = Some _ }::args, e::es, n::ns -> { Value = e; Name = Some n }::(rebuildArgs args es ns)\r\n        | [], [], [] -> []\r\n        | _ -> failwith \"rebuildExprNode: Wrong call length\"\r\n      ExprKind.Call(e, n, rebuildArgs args es ns)\r\n  | ExprKind.Variable _, [], [n] -> ExprKind.Variable(n)\r\n  | ExprKind.Variable _, _, _ -> failwith \"rebuildExprNode: Wrong variable length\"\r\n  | ExprKind.Property _, _, _ -> failwith \"rebuildExprNode: Wrong property length\"\r\n  | ExprKind.Call _, _, _ -> failwith \"rebuildExprNode: Wrong call length\"\r\n  | ExprKind.List _, _, _ -> failwith \"rebuildExprNode: Wrong list length\"\r\n  | ExprKind.Function _, _, _ -> failwith \"rebuildExprNode: Wrong function length\"\r\n  | ExprKind.Number _, _, _\r\n  | ExprKind.Boolean _, _, _\r\n  | ExprKind.String _, _, _\r\n  | ExprKind.Empty, _, _ \r\n  | ExprKind.Null, _, _ \r\n  | ExprKind.Unit, _, _ -> failwith \"rebuildExprNode: Not a node\"\r\n\r\n\r\n\r\n"]}