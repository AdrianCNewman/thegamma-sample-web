{"version":3,"sources":["../../../src/main/main.fsx"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"c:/tomas/public/thegamma/thegamma-script/out/src/main","sourcesContent":["﻿#r \"../../node_modules/fable-core/Fable.Core.dll\"\r\n#r \"../libraries/bin/Debug/libraries.dll\"\r\n#r \"../thegamma/bin/Debug/thegamma.dll\"\r\n#r \"../bindings/bin/Debug/bindings.dll\"\r\n#r \"../gui/bin/Debug/gui.dll\"\r\nopen Fable.Core.Extensions\r\nopen Fable.Import\r\nopen Fable.Import.Browser\r\nopen Fable.Extensions\r\nmodule FsOption = Microsoft.FSharp.Core.Option\r\n\r\nopen TheGamma\r\nopen TheGamma.Html\r\nopen TheGamma.Babel\r\nopen TheGamma.TypeChecker\r\nopen Fable.Core\r\n \r\nFable.Import.Node.require.Invoke(\"core-js\") |> ignore\r\n\r\n// ------------------------------------------------------------------------------------------------\r\n// Global provided types\r\n// ------------------------------------------------------------------------------------------------\r\n\r\nlet services = \r\n  if isLocalHost() then \"http://127.0.0.1:10042/\"\r\n  else \"http://thegamma-services.azurewebsites.net/\"\r\n\r\ntype ProvidedTypes = \r\n  { LookupNamed : string -> Type list -> Type\r\n    Globals : Map<string, Expression * Type> }\r\n    \r\nlet types = async {\r\n  let mutable named = Map.empty\r\n  let lookupNamed n tyargs = \r\n    match named.TryFind(n) with\r\n    | Some(r, tya) -> \r\n        if List.length tya <> List.length tyargs then \r\n          Log.error(\"Named type '%s' has mismatching length of type arguments\", n)\r\n          failwith (sprintf \"Named type '%s' has mismatching length of type arguments\" n)\r\n        TypeChecker.applyTypes (Map.ofList (List.zip tya tyargs)) r\r\n    | None -> \r\n        Log.error(\"Could not find named type '%s'\", n)\r\n        failwith (sprintf \"Could not find named type '%s'\" n)\r\n\r\n  let restTys = \r\n    [ TypePoviders.RestProvider.provideRestType lookupNamed \r\n        \"olympics1\" (services + \"olympics\") \"\"\r\n      TypePoviders.RestProvider.provideRestType lookupNamed \r\n        \"olympics\" (services + \"pivot\") (\"source=\" + services + \"olympics\")\r\n      TypePoviders.RestProvider.provideRestType lookupNamed \r\n        \"smlouvy1\" (services + \"smlouvy\") \"\"\r\n      TypePoviders.RestProvider.provideRestType lookupNamed \r\n        \"smlouvy2\" (services + \"pivot\") (\"source=\" + services + \"smlouvy\")\r\n      TypePoviders.RestProvider.provideRestType lookupNamed \r\n        \"adventure\" (services + \"adventure\") \"\"\r\n      TypePoviders.RestProvider.provideRestType lookupNamed \r\n        \"world\" (services + \"worldbank\") \"\"\r\n      \r\n      TypeProviders.Pivot.providePivotType (services + \"pdata/olympics\") \"olympics2\" lookupNamed\r\n        [ \"Games\", \"string\"; \"Year\", \"num\";  \"Sport\", \"string\"; \"Discipline\", \"string\" \r\n          \"Athlete\", \"string\"; \"Team\", \"string\"; \"Gender\", \"string\"; \"Event\", \"string\" \r\n          \"Medal\", \"string\"; \"Gold\", \"num\"; \"Silver\", \"num\"; \"Bronze\", \"num\" ]\r\n      \r\n      TypeProviders.Pivot.providePivotType (services + \"pdata/smlouvy\") \"smlouvy\" lookupNamed\r\n        [ \"Uzavřeno\", \"string\"; \"Publikováno\", \"string\"; \"Hodnota\", \"num\"\r\n          \"Chybí hodnota\", \"string\"; \"Subjekt\", \"string\"; \"Útvar\", \"string\"\r\n          \"Schválil\", \"string\"; \"Předmět\", \"string\"; \"Odkaz\", \"string\"\r\n          \"Platnost\", \"string\"; \"Příjemci\", \"string\"; \"Příjemci (IČO)\", \"string\" ]            \r\n\r\n      // TODO: some more types \r\n      TypePoviders.NamedType(\"value\", [\"a\"], Type.Any)\r\n      TypePoviders.NamedType(\"seq\", [\"a\"], Type.Any) \r\n      TypePoviders.NamedType(\"async\", [\"a\"], Type.Any) ]\r\n\r\n  let! fsTys = TypePoviders.FSharpProvider.provideFSharpTypes lookupNamed (\"/ext/libraries.json?\" + string System.DateTime.Now.Ticks)     \r\n  let allTys = restTys @ fsTys\r\n\r\n  named <- \r\n    allTys \r\n    |> Seq.choose (function TypePoviders.NamedType(s, tya, t) -> Some(s, (t, tya)) | _ -> None)\r\n    |> Map.ofSeq\r\n\r\n  let globals = \r\n    allTys \r\n    |> List.choose (function TypePoviders.GlobalValue(s, e, t) -> Some(s, (e, t)) | _ -> None)\r\n    |> Map.ofSeq\r\n  \r\n  return { Globals = globals; LookupNamed = lookupNamed } } |> Async.StartAsFuture \"types\"\r\n\r\nlet globalTypes = async { \r\n  let! ty = types |> Async.AwaitFuture\r\n  return ty.Globals |> Map.map (fun _ (_, t) -> t) } |> Async.StartAsFuture \"global types\"\r\n\r\nlet globalExprs = async { \r\n  let! ty = types |> Async.AwaitFuture\r\n  return ty.Globals |> Map.map (fun _ (e, _) -> e) } |> Async.StartAsFuture \"global exps\"\r\n\r\n// ------------------------------------------------------------------------------------------------\r\n// HTML helpers\r\n// ------------------------------------------------------------------------------------------------\r\n\r\nlet findElements f (el:Element) =\r\n  let rec loop acc (el:Node) = \r\n    if el = null then acc\r\n    else\r\n      let acc = \r\n        if el.nodeType = 1.0 && f (el :?> Element) then (el :?> Element)::acc\r\n        else acc\r\n      loop (loop acc el.firstChild) el.nextSibling\r\n  loop [] el.firstChild\r\n\r\nlet tryFindChildElement f (el:Element) = \r\n  let rec loop (el:Node) = \r\n    if el = null then None\r\n    elif el.nodeType = 1.0 && f (el :?> HTMLElement) then Some (el :?> HTMLElement)\r\n    else \r\n      match loop el.firstChild with\r\n      | None -> loop el.nextSibling\r\n      | res -> res  \r\n  loop el.firstChild \r\n\r\nlet findChildElement f e = tryFindChildElement f e |> FsOption.get\r\n\r\nlet withClass cls (el:Element) = el.classList.contains cls\r\n\r\n// ------------------------------------------------------------------------------------------------\r\n// Putting everything togeter\r\n// ------------------------------------------------------------------------------------------------\r\n\r\nopen TheGamma.Services\r\n\r\n[<Emit(\"setRunner($0, $1)\")>]\r\nlet setRunner (article:string) (f:unit -> unit) = failwith \"JS\"\r\n\r\n[<Emit(\"shareSnippet($0, $1)\")>]\r\nlet shareSnippet (snippet:string) (compiled:string) = failwith \"JS\"\r\n\r\n[<Emit(\"cannotShareSnippet()\")>]\r\nlet cannotShareSnippet () = failwith \"JS\"\r\n\r\nlet callShowMethod outId cmd = async {\r\n  match cmd.Command with\r\n  | CommandKind.Expr(e) ->\r\n      let! m = getObjectMembers e.Type\r\n      match m with \r\n      | ObjectMembers.Members(members) ->\r\n          let hasShow = members |> Array.exists (function \r\n            | Member.Method(\"show\", [], [_, _, Type.Primitive \"string\"], _, _, _) -> true\r\n            | _ -> false)\r\n          if hasShow then\r\n            let rng = { Range.Start = e.Range.End; End = e.Range.End }\r\n            let outExpr = { Expr = ExprKind.String(outId); Range = rng; Type = Type.Primitive(\"string\") }\r\n            let args = [{ Argument.Name = None; Argument.Value = outExpr }]\r\n            let newE = { e with Expr = ExprKind.Call(e, { Name = \"show\"; Range = rng }, args) }\r\n            return { cmd with Command = CommandKind.Expr(newE) }\r\n          else \r\n            return cmd\r\n      | _ -> return cmd\r\n  | _ -> return cmd }\r\n\r\nlet renderErrors article el (source, errors) = \r\n  if not (Seq.isEmpty errors) then\r\n    Log.event(\"compiler\", \"errors\", article, \r\n      JsInterop.createObj [\"source\", box source; \"errors\", box [| for e in errors -> e.Number |] ])\r\n  h?ul[\"class\" => \"error\"] \r\n    [ for e in errors |> Seq.sortBy (fun e -> e.Range.Start) -> \r\n        h?li [] [\r\n          h?span [\"class\" => \"err\"] [ text (sprintf \"error %d\" e.Number) ]\r\n          text \" \"\r\n          h?span [\"class\" => \"loc\"] [ text (sprintf \"at line %d col %d\" e.Range.Start.Line e.Range.Start.Column) ]\r\n          text (\": \" + e.Message) ] ]\r\n  |> renderTo el\r\n\r\n[<Emit(\"eval($0)\")>]\r\nlet eval (s:string) : unit = ()\r\n\r\nlet setupEditor (parent:HTMLElement) =\r\n  let source = (findChildElement (withClass \"ia-source\") parent).innerText.Trim()\r\n  let compiled = tryFindChildElement (withClass \"ia-compiled\") parent |> FsOption.map (fun el -> el.innerText.Trim())\r\n  let outputId = (findChildElement (withClass \"ia-output\") parent).id\r\n    \r\n  let runBtn = findChildElement (withClass \"ia-run\") parent\r\n  let shareBtn = findChildElement (withClass \"ia-share\") parent\r\n  let showCodeBtn = findChildElement (withClass \"ia-show-source\") parent\r\n  let showOptionsBtn = tryFindChildElement (withClass \"ia-show-options\") parent\r\n  \r\n  let editorEl = findChildElement (withClass \"ia-editor\") parent\r\n  let monacoEl = findChildElement (withClass \"ia-monaco\") parent\r\n  let errorsEl = findChildElement (withClass \"ia-errors\") parent\r\n  let optionsEl = findChildElement (withClass \"ia-options\") parent\r\n  \r\n  let article = parent.dataset.[\"article\"]\r\n\r\n  let checkingService = CheckingService(article, globalTypes)\r\n  let editorService = EditorService(article, checkingService.TypeCheck, 2000)\r\n  checkingService.ErrorsReported.Add (renderErrors article errorsEl)\r\n\r\n  let run text = async {\r\n    Log.event(\"compiler\", \"run\", article, text)\r\n    let! code = async {\r\n      match compiled with\r\n      | Some compiled when text = source -> return compiled\r\n      | _ ->\r\n        let! _, prog = checkingService.TypeCheck(text)\r\n        let! newBody = prog.Body |> Async.map (callShowMethod outputId)\r\n        let prog = { prog with Body = newBody }\r\n        return! CodeGenerator.compileAndRun globalExprs text prog }\r\n\r\n    // Get fable to reference everything\r\n    let s = TheGamma.Series.series<int, int>.create(async { return [||] }, \"\", \"\", \"\") \r\n    TheGamma.TypePovidersRuntime.RuntimeContext(\"lol\", \"\", \"troll\") |> ignore\r\n    TypePovidersRuntime.trimLeft |> ignore\r\n    TheGamma.GoogleCharts.chart.bar |> ignore\r\n    TheGamma.table<int, int>.create(s) |> ignore\r\n    TheGamma.Maps.timeline<int, int>.create(s) |> ignore\r\n    TheGamma.Series.series<int, int>.values([| 1 |]) |> ignore\r\n    eval code }\r\n\r\n  setRunner article (fun () -> \r\n    run source |> Async.StartImmediate)\r\n\r\n  let ed = Lazy.Create(fun () ->   \r\n    let ed = Monaco.createMonacoEditor monacoEl.id source (fun opts ->\r\n      opts.fontFamily <- Some \"Inconsolata\"\r\n      opts.fontSize <- Some 15.0\r\n      opts.lineHeight <- Some 20.0 )\r\n\r\n    let resizeEditor (text:string) =\r\n      let dim = JsInterop.createEmpty<monaco.editor.IDimension>\r\n      dim.width <- parent.clientWidth - 40.0\r\n      dim.height <- max 100.0 (20.0 + float (text.Split('\\n').Length) * 20.0)\r\n      ed.layout(dim)\r\n      monacoEl.style.height <- string dim.height + \"px\" \r\n\r\n    ed.getModel().onDidChangeContent(fun _ ->\r\n      let text = ed.getModel().getValue(monaco.editor.EndOfLinePreference.LF, false)\r\n      editorService.UpdateSource(text) \r\n      resizeEditor text) |> ignore\r\n      \r\n    resizeEditor source\r\n    ed )\r\n  \r\n  let getText() = \r\n    if not ed.IsValueCreated then source\r\n    else ed.Value.getModel().getValue(monaco.editor.EndOfLinePreference.LF, false)\r\n\r\n  let setText (edit:string) membr t = \r\n    Log.event(\"options\", \"set-text\", article, JsInterop.createObj [\"edit\", box edit; \"member\", box membr ])\r\n    ed.Value.getModel().setValue(t)\r\n    if showOptionsBtn.IsSome then\r\n      editorService.UpdateSource(t, true)\r\n    run(t) |> Async.StartImmediate\r\n\r\n  let mutable optionsVisible = false\r\n  let mutable editorVisible = false\r\n\r\n  let showOrHideActions () =\r\n    let vis = if optionsVisible || editorVisible then \"inline\" else \"none\"\r\n    let modf = getText() <> source\r\n    runBtn.style.display <- vis\r\n    shareBtn.style.display <- if modf then \"inline\" else vis\r\n\r\n  showOptionsBtn |> FsOption.iter (fun btn -> \r\n    editorService.EditorsUpdated.Add (fun eds ->\r\n      eds\r\n      |> List.sortBy (fun ed -> ed.Range.Start)\r\n      |> List.map (Editors.renderEditor checkingService.IsWellTyped setText (getText())) \r\n      |> h?div [\"class\" => \"ia-editor-panel\"]\r\n      |> renderTo optionsEl )\r\n  \r\n    btn.onclick <- fun _ ->\r\n      optionsVisible <- not optionsVisible\r\n      showOrHideActions()\r\n      optionsEl.style.display <- if optionsVisible then \"block\" else \"none\"\r\n      Log.event(\"gui\", \"options\", article, box optionsVisible)\r\n      if optionsVisible then editorService.UpdateSource(getText())\r\n      box () )\r\n\r\n  let switchEditor () =\r\n    editorVisible <- not editorVisible\r\n    showOrHideActions()\r\n    editorEl.style.display <- if editorVisible then \"block\" else \"none\"\r\n    Log.event(\"gui\", \"editor\", article, editorVisible)\r\n    if editorVisible then ed.Force() |> ignore\r\n    \r\n  showCodeBtn.onclick <- fun _ -> switchEditor(); box()\r\n  if source.Contains(\"empty.create\") then switchEditor()\r\n\r\n  shareBtn.onclick <- fun e -> \r\n    let text = getText()\r\n    Log.event(\"gui\", \"share\", article, text)\r\n    async { \r\n      let! ok, prog = checkingService.TypeCheck(text)\r\n      let! newBody = prog.Body |> Async.map (callShowMethod \"output-id-placeholder\")\r\n      let prog = { prog with Body = newBody }\r\n      let! compiled = CodeGenerator.compileAndRun globalExprs text prog         \r\n      if not ok then cannotShareSnippet()\r\n      else shareSnippet text compiled } |> Async.StartImmediate\r\n    box ()\r\n\r\n  runBtn.onclick <- fun e -> \r\n    Log.event(\"gui\", \"run\", article, \"click\")\r\n    getText() |> run |> Async.StartImmediate |> box\r\n\r\n\r\nMonaco.setupMonacoServices(globalTypes)\r\n\r\nfor el in findElements (withClass \"ia-figure\") document.body do\r\n  setupEditor (el :?> HTMLElement)\r\n"]}