{"version":3,"sources":["../../../src/gui/html.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4CAAA;AAAA;;AAAA;AAAA;AAAA,G;;;;kCAAA;AAAA;;AAAA;AAAA;AAAA,G;;;;AAwBQ;AAAA,kCAKE;AAAK;AAAL,kBACmB;AAAA;AAAO,OAD1B;AAAE,KAAF,EALF,6BASE;AAAK;AACA,kCAAU;AAAA;AAAA,OAAV;;AACT;AAAA;AAAkB;AAA2B;;AAC7C;AAAA;;AACQ,4CAEQ;AAAA,6CAA6C;AAAC,uCAAD;AAAM,WAAnD;AAAqD,SAF7D,MACW;AAAA;AAAqB;AAC6B;;AAEnE;AAAA;AAAA;AAAkB;AAAG;;AAChB,+BAAwB;AAAA;AAAI,SAA5B;AATH;;AASG;AAAA;AAAA;AAAA;AAAA;AAA6B,SAA7B;AAA6B,OADlC;;AARE;AAAE,KAAF,EATF,IAEF,uCAFE;AAAA;AAAA;AAAI;;AAsBV;AAAA,WAAM,sBAAN,EAA2C;AAAA;AAAgC;;AAC/D;AACZ;AACA;AAAG;;AAEQ;AAAA;AAAO;;;eACF,iC;;;;eACC,8B;;;;AArDnB;AAAA;AAAA;;;;0CAsEQ;AAAM;AAAN;AAAA;AAAA;;AAKI;AAAA;;AAAA;;AAAA;AAAA;AACJ;AAAS;;AAAU,eAAW;AAAA;AAAW,eAAtB;AADI,aAAnB;AAAA;AAAmB;AAAA,WAAnB;AAAA;AAAmB;AAAA,SAAnB;;AAGR,kCAAyB;AAAA,kBAAS,cAAT;AAAuB;AAAS,SAAzD;;AARI,gBAUJ;AAAA;AAAW,SAVP,EAYF;AAAA;AACA,sCACE;AAAA;AACA;AAAQ,WAFV;AAEY,SAfV;AAAG;;;2CAZH;AAAA;AAAA;AACF,oBAAG,cAAH,UAEE;AAAA;AAAA;AAAA;AAAA;;AAAA;AACY,oKACJ;AAAA;;AAAA,sDACO;AAAA,iDAAmB;AAAA;AAAc,qBAAjC;AAAkC;AADxC;AAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIW,aANb;AAQF,8CAAW,aAAX,EAA2B,aAA3B;AATK,WAAD;AAAA;AAAC;;;;;;;;AA1DT,sBAuFQ,QAvFR","file":"html.js","sourceRoot":"c:/tomas/public/thegamma/thegamma-script/out/src/gui","sourcesContent":["ï»¿module TheGamma.Html\r\nmodule FsOption = FSharp.Core.Option\r\nopen Fable.Import.Browser\r\nopen Fable.Core\r\n\r\n[<Fable.Core.Emit(\"jQuery($0).chosen()\")>]\r\nlet private chosen (el:HTMLElement) : unit = failwith \"JS\"\r\n\r\n[<Fable.Core.Emit(\"jQuery($0).on($1, $2)\")>]\r\nlet private on (el:HTMLElement) (evt:string) (f:unit -> unit) : unit = failwith \"JS\"\r\n\r\n[<Fable.Core.Emit(\"event\")>]\r\nlet private event () : Event = failwith \"JS\"\r\n\r\ntype DomAttribute = \r\n  | Event of (HTMLElement -> Event -> unit)\r\n  | Property of string\r\n\r\ntype DomNode = \r\n  | Text of string\r\n  | Element of tag:string * attributes:(string * DomAttribute)[] * children : DomNode[] * onRender : (HTMLElement -> unit) option\r\n  | Part of func:(HTMLElement -> unit)\r\n\r\nlet rec render node = \r\n  match node with\r\n  | Text(s) -> \r\n      document.createTextNode(s) :> Node, ignore\r\n\r\n  | Part(func) ->\r\n      let el = document.createElement(\"div\")\r\n      el :> Node, (fun () -> func el)\r\n\r\n  | Element(tag, attrs, children, f) ->\r\n      let el = document.createElement(tag)\r\n      let rc = Array.map render children\r\n      for c, _ in rc do el.appendChild(c) |> ignore\r\n      for k, a in attrs do \r\n        match a with\r\n        | Property(v) -> el.setAttribute(k, v)\r\n        | Event(f) -> el.addEventListener(k, U2.Case1(EventListener(f el)))\r\n      let onRender () = \r\n        for _, f in rc do f()\r\n        f |> FsOption.iter (fun f -> f el)\r\n      el :> Node, onRender\r\n\r\nlet renderTo (node:HTMLElement) dom = \r\n  while box node.lastChild <> null do ignore(node.removeChild(node.lastChild))\r\n  let el, f = render dom\r\n  node.appendChild(el) |> ignore\r\n  f()\r\n  \r\nlet text s = Text(s)\r\nlet (=>) k v = k, Property(v)\r\nlet (=!>) k f = k, Event(f)\r\n\r\n\r\ntype El() = \r\n  static member (?) (_:El, n:string) = fun a b ->\r\n    let f = \r\n      if n <> \"select\" then None\r\n      else Some (fun el ->\r\n        chosen el\r\n        for k, v in a do\r\n          match v with\r\n          | Event f -> on el k (fun () -> f el (event()))\r\n          | _ -> ()\r\n      )\r\n    Element(n, Array.ofList a, Array.ofList b, f)\r\n\r\n  member x.part (initial:'State) (fold:'State -> 'Event -> 'State) = \r\n    let evt = Control.Event<_>()\r\n    let mutable state = initial\r\n    let mutable container = None\r\n    let mutable renderer = None\r\n    let render () =\r\n      match container, renderer with\r\n      | Some el, Some r -> r state |> renderTo el\r\n      | _ -> ()\r\n    evt.Publish.Add(fun e -> state <- fold state e; render ())\r\n\r\n    evt.Trigger,\r\n    fun (r:'State -> DomNode) ->\r\n      renderer <- Some r\r\n      Part(fun el -> \r\n        container <- Some el\r\n        render() )\r\n\r\nlet h = El()\r\n"]}