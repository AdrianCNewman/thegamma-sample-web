{"version":3,"sources":["../../../../src/libraries/google/extensions.fs"],"names":[],"mappings":"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","file":"extensions.js","sourceRoot":"C:/Tomas/Public/thegamma/thegamma-script/out/src/libraries","sourcesContent":["// AUTO-GENERATED - DO NOT EDIT\r\n[<ReflectedDefinition;AutoOpen>]\r\nmodule TheGamma.GoogleCharts.Extensions\r\n\r\nopen System\r\nopen TheGamma.GoogleCharts\r\nopen TheGamma.GoogleCharts.Helpers\r\nopen TheGamma.GoogleCharts.Options\r\n\r\ntype Geo = \r\n  { data : ChartData; typeName : string; \r\n    options : GeoChartOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?backgroundColor:obj,?datalessRegionColor:string,?displayMode:string,?enableRegionInteractivity:bool,?height:float,?keepAspectRatio:bool,?region:string,?markerOpacity:float,?resolution:string,?width:float) = \r\n    let o = x.options\r\n    let newOptions = { x.options with backgroundColor = right o \"backgroundColor\" backgroundColor; datalessRegionColor = right o \"datalessRegionColor\" datalessRegionColor; displayMode = right o \"displayMode\" displayMode; enableRegionInteractivity = right o \"enableRegionInteractivity\" enableRegionInteractivity; height = right o \"height\" height; keepAspectRatio = right o \"keepAspectRatio\" keepAspectRatio; region = right o \"region\" region; markerOpacity = right o \"markerOpacity\" markerOpacity; resolution = right o \"resolution\" resolution; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.colorAxis(?minValue:float,?maxValue:float,?values:seq<float>,?colors:seq<string>) =\r\n    let o = x.options.colorAxis\r\n    let newNested = { ChartColorAxis.minValue = right o \"minValue\" minValue; maxValue = right o \"maxValue\" maxValue; values = right o \"values\" (Option.map Array.ofSeq values); colors = right o \"colors\" (Option.map Array.ofSeq colors); legend = copy o \"legend\" }\r\n    { x with options = { x.options with colorAxis = newNested } }\r\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\r\n    let o = x.options.legend\r\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with legend = newNested } }\r\n  member x.magnifyingGlass(?enable:bool,?zoomFactor:float) =\r\n    let o = x.options.magnifyingGlass\r\n    let newNested = { GeoChartMagnifyingGlass.enable = right o \"enable\" enable; zoomFactor = right o \"zoomFactor\" zoomFactor;  }\r\n    { x with options = { x.options with magnifyingGlass = newNested } }\r\n  member x.sizeAxis(?maxSize:float,?maxValue:float,?minSize:float,?minValue:float) =\r\n    let o = x.options.sizeAxis\r\n    let newNested = { ChartSizeAxis.maxSize = right o \"maxSize\" maxSize; maxValue = right o \"maxValue\" maxValue; minSize = right o \"minSize\" minSize; minValue = right o \"minValue\" minValue;  }\r\n    { x with options = { x.options with sizeAxis = newNested } }\r\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\r\n    let o = x.options.tooltip\r\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with tooltip = newNested } }\r\ntype Scatter = \r\n  { data : ChartData; typeName : string; \r\n    options : ScatterChartOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?aggregationTarget:string,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?curveType:string,?dataOpacity:float,?enableInteractivity:bool,?fontSize:float,?fontName:string,?forceIFrame:bool,?height:float,?lineWidth:float,?pointSize:float,?selectionMode:string,?series:obj,?theme:string,?title:string,?titlePosition:string,?width:float) = \r\n    let o = x.options\r\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); curveType = right o \"curveType\" curveType; dataOpacity = right o \"dataOpacity\" dataOpacity; enableInteractivity = right o \"enableInteractivity\" enableInteractivity; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; forceIFrame = right o \"forceIFrame\" forceIFrame; height = right o \"height\" height; lineWidth = right o \"lineWidth\" lineWidth; pointSize = right o \"pointSize\" pointSize; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.trendlines(?trendlines:seq<Trendline>) =\r\n    let o = x.options\r\n    { x with options = { x.options with trendlines = right o \"trendlines\" (Option.map Array.ofSeq trendlines) } }\r\n  member x.animation(?duration:float,?easing:string) =\r\n    let o = x.options.animation\r\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\r\n    { x with options = { x.options with animation = newNested } }\r\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\r\n    let o = x.options.chartArea\r\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\r\n    { x with options = { x.options with chartArea = newNested } }\r\n  member x.crosshair(?color:string,?opacity:float,?orientation:string,?trigger:string) =\r\n    let o = x.options.crosshair\r\n    let newNested = { ChartCrosshair.color = right o \"color\" color; opacity = right o \"opacity\" opacity; orientation = right o \"orientation\" orientation; trigger = right o \"trigger\" trigger; focused = copy o \"focused\"; selected = copy o \"selected\" }\r\n    { x with options = { x.options with crosshair = newNested } }\r\n  member x.explorer(?actions:seq<string>,?axis:string,?keepInBounds:bool,?maxZoomIn:float,?maxZoomOut:float,?zoomDelta:float) =\r\n    let o = x.options.explorer\r\n    let newNested = { ChartExplorer.actions = right o \"actions\" (Option.map Array.ofSeq actions); axis = right o \"axis\" axis; keepInBounds = right o \"keepInBounds\" keepInBounds; maxZoomIn = right o \"maxZoomIn\" maxZoomIn; maxZoomOut = right o \"maxZoomOut\" maxZoomOut; zoomDelta = right o \"zoomDelta\" zoomDelta;  }\r\n    { x with options = { x.options with explorer = newNested } }\r\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.hAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with hAxis = newNested } }\r\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\r\n    let o = x.options.legend\r\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with legend = newNested } }\r\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.titleTextStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with titleTextStyle = newNested } }\r\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\r\n    let o = x.options.tooltip\r\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with tooltip = newNested } }\r\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.vAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with vAxis = newNested } }\r\ntype Column = \r\n  { data : ChartData; typeName : string; \r\n    options : ColumnChartOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?aggregationTarget:string,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?height:float,?isStacked:bool,?reverseCategories:bool,?selectionMode:string,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \r\n    let o = x.options\r\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; isStacked = right o \"isStacked\" isStacked; reverseCategories = right o \"reverseCategories\" reverseCategories; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.animation(?duration:float,?easing:string) =\r\n    let o = x.options.animation\r\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\r\n    { x with options = { x.options with animation = newNested } }\r\n  member x.bar(?groupWidth:obj) =\r\n    let o = x.options.bar\r\n    let newNested = { GroupWidth.groupWidth = right o \"groupWidth\" groupWidth;  }\r\n    { x with options = { x.options with bar = newNested } }\r\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\r\n    let o = x.options.chartArea\r\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\r\n    { x with options = { x.options with chartArea = newNested } }\r\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.hAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with hAxis = newNested } }\r\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\r\n    let o = x.options.legend\r\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with legend = newNested } }\r\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.titleTextStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with titleTextStyle = newNested } }\r\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\r\n    let o = x.options.tooltip\r\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with tooltip = newNested } }\r\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.vAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with vAxis = newNested } }\r\ntype Line = \r\n  { data : ChartData; typeName : string; \r\n    options : LineChartOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?aggregationTarget:string,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?curveType:string,?dataOpacity:float,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?height:float,?interpolateNulls:bool,?lineWidth:float,?orientation:string,?pointSize:float,?reverseCategories:bool,?selectionMode:string,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \r\n    let o = x.options\r\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); curveType = right o \"curveType\" curveType; dataOpacity = right o \"dataOpacity\" dataOpacity; enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; interpolateNulls = right o \"interpolateNulls\" interpolateNulls; lineWidth = right o \"lineWidth\" lineWidth; orientation = right o \"orientation\" orientation; pointSize = right o \"pointSize\" pointSize; reverseCategories = right o \"reverseCategories\" reverseCategories; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.animation(?duration:float,?easing:string) =\r\n    let o = x.options.animation\r\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\r\n    { x with options = { x.options with animation = newNested } }\r\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\r\n    let o = x.options.chartArea\r\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\r\n    { x with options = { x.options with chartArea = newNested } }\r\n  member x.crosshair(?color:string,?opacity:float,?orientation:string,?trigger:string) =\r\n    let o = x.options.crosshair\r\n    let newNested = { ChartCrosshair.color = right o \"color\" color; opacity = right o \"opacity\" opacity; orientation = right o \"orientation\" orientation; trigger = right o \"trigger\" trigger; focused = copy o \"focused\"; selected = copy o \"selected\" }\r\n    { x with options = { x.options with crosshair = newNested } }\r\n  member x.explorer(?actions:seq<string>,?axis:string,?keepInBounds:bool,?maxZoomIn:float,?maxZoomOut:float,?zoomDelta:float) =\r\n    let o = x.options.explorer\r\n    let newNested = { ChartExplorer.actions = right o \"actions\" (Option.map Array.ofSeq actions); axis = right o \"axis\" axis; keepInBounds = right o \"keepInBounds\" keepInBounds; maxZoomIn = right o \"maxZoomIn\" maxZoomIn; maxZoomOut = right o \"maxZoomOut\" maxZoomOut; zoomDelta = right o \"zoomDelta\" zoomDelta;  }\r\n    { x with options = { x.options with explorer = newNested } }\r\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.hAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with hAxis = newNested } }\r\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\r\n    let o = x.options.legend\r\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with legend = newNested } }\r\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.titleTextStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with titleTextStyle = newNested } }\r\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\r\n    let o = x.options.tooltip\r\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with tooltip = newNested } }\r\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.vAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with vAxis = newNested } }\r\ntype Bar = \r\n  { data : ChartData; typeName : string; \r\n    options : BarChartOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?aggregationTarget:string,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?dataOpacity:float,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?hAxes:obj,?height:float,?isStacked:bool,?reverseCategories:bool,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \r\n    let o = x.options\r\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); dataOpacity = right o \"dataOpacity\" dataOpacity; enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; hAxes = right o \"hAxes\" hAxes; height = right o \"height\" height; isStacked = right o \"isStacked\" isStacked; reverseCategories = right o \"reverseCategories\" reverseCategories; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.animation(?duration:float,?easing:string) =\r\n    let o = x.options.animation\r\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\r\n    { x with options = { x.options with animation = newNested } }\r\n  member x.bar(?groupWidth:obj) =\r\n    let o = x.options.bar\r\n    let newNested = { GroupWidth.groupWidth = right o \"groupWidth\" groupWidth;  }\r\n    { x with options = { x.options with bar = newNested } }\r\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\r\n    let o = x.options.chartArea\r\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\r\n    { x with options = { x.options with chartArea = newNested } }\r\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.hAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with hAxis = newNested } }\r\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\r\n    let o = x.options.legend\r\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with legend = newNested } }\r\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.titleTextStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with titleTextStyle = newNested } }\r\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\r\n    let o = x.options.tooltip\r\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with tooltip = newNested } }\r\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.vAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with vAxis = newNested } }\r\ntype Histogram = \r\n  { data : ChartData; typeName : string; \r\n    options : HistogramOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?dataOpacity:float,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?height:float,?interpolateNulls:bool,?isStacked:bool,?orientation:string,?reverseCategories:bool,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \r\n    let o = x.options\r\n    let newOptions = { x.options with axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); dataOpacity = right o \"dataOpacity\" dataOpacity; enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; interpolateNulls = right o \"interpolateNulls\" interpolateNulls; isStacked = right o \"isStacked\" isStacked; orientation = right o \"orientation\" orientation; reverseCategories = right o \"reverseCategories\" reverseCategories; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.animation(?duration:float,?easing:string) =\r\n    let o = x.options.animation\r\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\r\n    { x with options = { x.options with animation = newNested } }\r\n  member x.bar(?groupWidth:obj) =\r\n    let o = x.options.bar\r\n    let newNested = { GroupWidth.groupWidth = right o \"groupWidth\" groupWidth;  }\r\n    { x with options = { x.options with bar = newNested } }\r\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\r\n    let o = x.options.chartArea\r\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\r\n    { x with options = { x.options with chartArea = newNested } }\r\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.hAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with hAxis = newNested } }\r\n  member x.histogram(?bucketSize:float,?hideBucketItems:bool,?lastBucketPercentile:float) =\r\n    let o = x.options.histogram\r\n    let newNested = { HistogramHistogram.bucketSize = right o \"bucketSize\" bucketSize; hideBucketItems = right o \"hideBucketItems\" hideBucketItems; lastBucketPercentile = right o \"lastBucketPercentile\" lastBucketPercentile;  }\r\n    { x with options = { x.options with histogram = newNested } }\r\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\r\n    let o = x.options.legend\r\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with legend = newNested } }\r\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.titleTextStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with titleTextStyle = newNested } }\r\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\r\n    let o = x.options.tooltip\r\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with tooltip = newNested } }\r\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.vAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with vAxis = newNested } }\r\ntype Area = \r\n  { data : ChartData; typeName : string; \r\n    options : AreaChartOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?aggregationTarget:string,?areaOpacity:float,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?dataOpacity:float,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?height:float,?interpolateNulls:bool,?isStacked:bool,?lineWidth:float,?orientation:string,?pointSize:float,?reverseCategories:bool,?selectionMode:string,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \r\n    let o = x.options\r\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; areaOpacity = right o \"areaOpacity\" areaOpacity; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); dataOpacity = right o \"dataOpacity\" dataOpacity; enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; interpolateNulls = right o \"interpolateNulls\" interpolateNulls; isStacked = right o \"isStacked\" isStacked; lineWidth = right o \"lineWidth\" lineWidth; orientation = right o \"orientation\" orientation; pointSize = right o \"pointSize\" pointSize; reverseCategories = right o \"reverseCategories\" reverseCategories; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.animation(?duration:float,?easing:string) =\r\n    let o = x.options.animation\r\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\r\n    { x with options = { x.options with animation = newNested } }\r\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\r\n    let o = x.options.chartArea\r\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\r\n    { x with options = { x.options with chartArea = newNested } }\r\n  member x.crosshair(?color:string,?opacity:float,?orientation:string,?trigger:string) =\r\n    let o = x.options.crosshair\r\n    let newNested = { ChartCrosshair.color = right o \"color\" color; opacity = right o \"opacity\" opacity; orientation = right o \"orientation\" orientation; trigger = right o \"trigger\" trigger; focused = copy o \"focused\"; selected = copy o \"selected\" }\r\n    { x with options = { x.options with crosshair = newNested } }\r\n  member x.explorer(?actions:seq<string>,?axis:string,?keepInBounds:bool,?maxZoomIn:float,?maxZoomOut:float,?zoomDelta:float) =\r\n    let o = x.options.explorer\r\n    let newNested = { ChartExplorer.actions = right o \"actions\" (Option.map Array.ofSeq actions); axis = right o \"axis\" axis; keepInBounds = right o \"keepInBounds\" keepInBounds; maxZoomIn = right o \"maxZoomIn\" maxZoomIn; maxZoomOut = right o \"maxZoomOut\" maxZoomOut; zoomDelta = right o \"zoomDelta\" zoomDelta;  }\r\n    { x with options = { x.options with explorer = newNested } }\r\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.hAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with hAxis = newNested } }\r\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\r\n    let o = x.options.legend\r\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with legend = newNested } }\r\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.titleTextStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with titleTextStyle = newNested } }\r\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\r\n    let o = x.options.tooltip\r\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with tooltip = newNested } }\r\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.vAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with vAxis = newNested } }\r\ntype Annotation = \r\n  { data : ChartData; typeName : string; \r\n    options : AnnotationChartOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?allowHtml:bool,?allValuesSuffix:string,?annotationsWidth:float,?colors:seq<string>,?dateFormat:string,?displayAnnotations:bool,?displayAnnotationsFilter:bool,?displayDateTimeBarSeparator:bool,?displayExactValues:bool,?displayLegendDots:bool,?displayLegendValues:bool,?displayRangeSelector:bool,?displayZoomButtons:bool,?fill:float,?legendPosition:string,?max:float,?min:float,?numberFormats:obj,?scaleColumns:seq<float>,?scaleFormat:string,?scaleType:string,?thickness:float,?zoomEndTime:DateTime,?zoomStartTime:DateTime) = \r\n    let o = x.options\r\n    let newOptions = { x.options with allowHtml = right o \"allowHtml\" allowHtml; allValuesSuffix = right o \"allValuesSuffix\" allValuesSuffix; annotationsWidth = right o \"annotationsWidth\" annotationsWidth; colors = right o \"colors\" (Option.map Array.ofSeq colors); dateFormat = right o \"dateFormat\" dateFormat; displayAnnotations = right o \"displayAnnotations\" displayAnnotations; displayAnnotationsFilter = right o \"displayAnnotationsFilter\" displayAnnotationsFilter; displayDateTimeBarSeparator = right o \"displayDateTimeBarSeparator\" displayDateTimeBarSeparator; displayExactValues = right o \"displayExactValues\" displayExactValues; displayLegendDots = right o \"displayLegendDots\" displayLegendDots; displayLegendValues = right o \"displayLegendValues\" displayLegendValues; displayRangeSelector = right o \"displayRangeSelector\" displayRangeSelector; displayZoomButtons = right o \"displayZoomButtons\" displayZoomButtons; fill = right o \"fill\" fill; legendPosition = right o \"legendPosition\" legendPosition; max = right o \"max\" max; min = right o \"min\" min; numberFormats = right o \"numberFormats\" numberFormats; scaleColumns = right o \"scaleColumns\" (Option.map Array.ofSeq scaleColumns); scaleFormat = right o \"scaleFormat\" scaleFormat; scaleType = right o \"scaleType\" scaleType; thickness = right o \"thickness\" thickness; zoomEndTime = right o \"zoomEndTime\" zoomEndTime; zoomStartTime = right o \"zoomStartTime\" zoomStartTime }\r\n    { x with options = newOptions }\r\ntype SteppedArea = \r\n  { data : ChartData; typeName : string; \r\n    options : SteppedAreaChartOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?aggregationTarget:string,?areaOpacity:float,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?connectSteps:bool,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?height:float,?interpolateNulls:bool,?isStacked:bool,?reverseCategories:bool,?selectionMode:string,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \r\n    let o = x.options\r\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; areaOpacity = right o \"areaOpacity\" areaOpacity; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); connectSteps = right o \"connectSteps\" connectSteps; enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; interpolateNulls = right o \"interpolateNulls\" interpolateNulls; isStacked = right o \"isStacked\" isStacked; reverseCategories = right o \"reverseCategories\" reverseCategories; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.animation(?duration:float,?easing:string) =\r\n    let o = x.options.animation\r\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\r\n    { x with options = { x.options with animation = newNested } }\r\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\r\n    let o = x.options.chartArea\r\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\r\n    { x with options = { x.options with chartArea = newNested } }\r\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.hAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with hAxis = newNested } }\r\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\r\n    let o = x.options.legend\r\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with legend = newNested } }\r\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.titleTextStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with titleTextStyle = newNested } }\r\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\r\n    let o = x.options.tooltip\r\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with tooltip = newNested } }\r\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.vAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with vAxis = newNested } }\r\ntype Pie = \r\n  { data : ChartData; typeName : string; \r\n    options : PieChartOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?backgroundColor:obj,?colors:seq<string>,?enableInteractivity:bool,?fontSize:float,?fontName:string,?height:float,?is3D:bool,?pieHole:float,?pieSliceBorderColor:string,?pieSliceText:string,?pieStartAngle:float,?reverseCategories:bool,?pieResidueSliceColor:string,?pieResidueSliceLabel:string,?slices:obj,?sliceVisibilityThreshold:float,?title:string,?width:float) = \r\n    let o = x.options\r\n    let newOptions = { x.options with backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); enableInteractivity = right o \"enableInteractivity\" enableInteractivity; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; is3D = right o \"is3D\" is3D; pieHole = right o \"pieHole\" pieHole; pieSliceBorderColor = right o \"pieSliceBorderColor\" pieSliceBorderColor; pieSliceText = right o \"pieSliceText\" pieSliceText; pieStartAngle = right o \"pieStartAngle\" pieStartAngle; reverseCategories = right o \"reverseCategories\" reverseCategories; pieResidueSliceColor = right o \"pieResidueSliceColor\" pieResidueSliceColor; pieResidueSliceLabel = right o \"pieResidueSliceLabel\" pieResidueSliceLabel; slices = right o \"slices\" slices; sliceVisibilityThreshold = right o \"sliceVisibilityThreshold\" sliceVisibilityThreshold; title = right o \"title\" title; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\r\n    let o = x.options.chartArea\r\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\r\n    { x with options = { x.options with chartArea = newNested } }\r\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\r\n    let o = x.options.legend\r\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with legend = newNested } }\r\n  member x.pieSliceTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.pieSliceTextStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with pieSliceTextStyle = newNested } }\r\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.titleTextStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with titleTextStyle = newNested } }\r\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\r\n    let o = x.options.tooltip\r\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with tooltip = newNested } }\r\ntype Bubble = \r\n  { data : ChartData; typeName : string; \r\n    options : BubbleChartOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?enableInteractivity:bool,?fontSize:float,?fontName:string,?forceIFrame:bool,?height:float,?selectionMode:string,?series:obj,?sortBubblesBySize:bool,?theme:string,?title:string,?titlePosition:string,?width:float) = \r\n    let o = x.options\r\n    let newOptions = { x.options with axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); enableInteractivity = right o \"enableInteractivity\" enableInteractivity; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; forceIFrame = right o \"forceIFrame\" forceIFrame; height = right o \"height\" height; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; sortBubblesBySize = right o \"sortBubblesBySize\" sortBubblesBySize; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.animation(?duration:float,?easing:string) =\r\n    let o = x.options.animation\r\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\r\n    { x with options = { x.options with animation = newNested } }\r\n  member x.bubble(?opacity:float,?stroke:string) =\r\n    let o = x.options.bubble\r\n    let newNested = { ChartBubble.opacity = right o \"opacity\" opacity; stroke = right o \"stroke\" stroke; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with bubble = newNested } }\r\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\r\n    let o = x.options.chartArea\r\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\r\n    { x with options = { x.options with chartArea = newNested } }\r\n  member x.colorAxis(?minValue:float,?maxValue:float,?values:seq<float>,?colors:seq<string>) =\r\n    let o = x.options.colorAxis\r\n    let newNested = { ChartColorAxis.minValue = right o \"minValue\" minValue; maxValue = right o \"maxValue\" maxValue; values = right o \"values\" (Option.map Array.ofSeq values); colors = right o \"colors\" (Option.map Array.ofSeq colors); legend = copy o \"legend\" }\r\n    { x with options = { x.options with colorAxis = newNested } }\r\n  member x.explorer(?actions:seq<string>,?axis:string,?keepInBounds:bool,?maxZoomIn:float,?maxZoomOut:float,?zoomDelta:float) =\r\n    let o = x.options.explorer\r\n    let newNested = { ChartExplorer.actions = right o \"actions\" (Option.map Array.ofSeq actions); axis = right o \"axis\" axis; keepInBounds = right o \"keepInBounds\" keepInBounds; maxZoomIn = right o \"maxZoomIn\" maxZoomIn; maxZoomOut = right o \"maxZoomOut\" maxZoomOut; zoomDelta = right o \"zoomDelta\" zoomDelta;  }\r\n    { x with options = { x.options with explorer = newNested } }\r\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.hAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with hAxis = newNested } }\r\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\r\n    let o = x.options.legend\r\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with legend = newNested } }\r\n  member x.sizeAxis(?maxSize:float,?maxValue:float,?minSize:float,?minValue:float) =\r\n    let o = x.options.sizeAxis\r\n    let newNested = { ChartSizeAxis.maxSize = right o \"maxSize\" maxSize; maxValue = right o \"maxValue\" maxValue; minSize = right o \"minSize\" minSize; minValue = right o \"minValue\" minValue;  }\r\n    { x with options = { x.options with sizeAxis = newNested } }\r\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.titleTextStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with titleTextStyle = newNested } }\r\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\r\n    let o = x.options.tooltip\r\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with tooltip = newNested } }\r\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.vAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with vAxis = newNested } }\r\ntype TreeMap = \r\n  { data : ChartData; typeName : string; \r\n    options : TreeMapOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?fontColor:string,?fontFamily:string,?fontSize:float,?forceIFrame:bool,?headerColor:string,?headerHeight:float,?headerHighlightColor:string,?hintOpacity:float,?maxColor:string,?maxDepth:float,?maxHighlightColor:string,?maxPostDepth:float,?maxColorValue:float,?midColor:string,?midHighlightColor:string,?minColor:string,?minHighlightColor:string,?minColorValue:float,?showScale:bool,?showTooltips:bool,?title:string,?useWeightedAverageForAggregation:bool) = \r\n    let o = x.options\r\n    let newOptions = { x.options with fontColor = right o \"fontColor\" fontColor; fontFamily = right o \"fontFamily\" fontFamily; fontSize = right o \"fontSize\" fontSize; forceIFrame = right o \"forceIFrame\" forceIFrame; headerColor = right o \"headerColor\" headerColor; headerHeight = right o \"headerHeight\" headerHeight; headerHighlightColor = right o \"headerHighlightColor\" headerHighlightColor; hintOpacity = right o \"hintOpacity\" hintOpacity; maxColor = right o \"maxColor\" maxColor; maxDepth = right o \"maxDepth\" maxDepth; maxHighlightColor = right o \"maxHighlightColor\" maxHighlightColor; maxPostDepth = right o \"maxPostDepth\" maxPostDepth; maxColorValue = right o \"maxColorValue\" maxColorValue; midColor = right o \"midColor\" midColor; midHighlightColor = right o \"midHighlightColor\" midHighlightColor; minColor = right o \"minColor\" minColor; minHighlightColor = right o \"minHighlightColor\" minHighlightColor; minColorValue = right o \"minColorValue\" minColorValue; showScale = right o \"showScale\" showScale; showTooltips = right o \"showTooltips\" showTooltips; title = right o \"title\" title; useWeightedAverageForAggregation = right o \"useWeightedAverageForAggregation\" useWeightedAverageForAggregation }\r\n    { x with options = newOptions }\r\n  member x.textStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.textStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with textStyle = newNested } }\r\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.titleTextStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with titleTextStyle = newNested } }\r\ntype Table = \r\n  { data : ChartData; typeName : string; \r\n    options : TableOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?allowHtml:bool,?alternatingRowStyle:bool,?firstRowNumber:float,?height:string,?page:string,?pageSize:float,?rtlTable:bool,?scrollLeftStartPosition:float,?showRowNumber:bool,?sort:string,?sortAscending:bool,?sortColumn:float,?startPage:float,?width:string) = \r\n    let o = x.options\r\n    let newOptions = { x.options with allowHtml = right o \"allowHtml\" allowHtml; alternatingRowStyle = right o \"alternatingRowStyle\" alternatingRowStyle; firstRowNumber = right o \"firstRowNumber\" firstRowNumber; height = right o \"height\" height; page = right o \"page\" page; pageSize = right o \"pageSize\" pageSize; rtlTable = right o \"rtlTable\" rtlTable; scrollLeftStartPosition = right o \"scrollLeftStartPosition\" scrollLeftStartPosition; showRowNumber = right o \"showRowNumber\" showRowNumber; sort = right o \"sort\" sort; sortAscending = right o \"sortAscending\" sortAscending; sortColumn = right o \"sortColumn\" sortColumn; startPage = right o \"startPage\" startPage; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.cssClassName(?headerRow:string,?tableRow:string,?oddTableRow:string,?selectedTableRow:string,?hoverTableRow:string,?headerCell:string,?tableCell:string,?rowNumberCell:string) =\r\n    let o = x.options.cssClassName\r\n    let newNested = { CssClassNames.headerRow = right o \"headerRow\" headerRow; tableRow = right o \"tableRow\" tableRow; oddTableRow = right o \"oddTableRow\" oddTableRow; selectedTableRow = right o \"selectedTableRow\" selectedTableRow; hoverTableRow = right o \"hoverTableRow\" hoverTableRow; headerCell = right o \"headerCell\" headerCell; tableCell = right o \"tableCell\" tableCell; rowNumberCell = right o \"rowNumberCell\" rowNumberCell;  }\r\n    { x with options = { x.options with cssClassName = newNested } }\r\ntype Timeline = \r\n  { data : ChartData; typeName : string; \r\n    options : TimelineOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?avoidOverlappingGridLines:bool,?backgroundColor:obj,?colors:seq<string>,?enableInteractivity:bool,?forceIFrame:bool,?height:float,?width:float) = \r\n    let o = x.options\r\n    let newOptions = { x.options with avoidOverlappingGridLines = right o \"avoidOverlappingGridLines\" avoidOverlappingGridLines; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); enableInteractivity = right o \"enableInteractivity\" enableInteractivity; forceIFrame = right o \"forceIFrame\" forceIFrame; height = right o \"height\" height; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.timeline(?colorByRowLabel:bool,?groupByRowLabel:bool,?showRowLabels:bool,?singleColor:string) =\r\n    let o = x.options.timeline\r\n    let newNested = { TimelineTimeline.colorByRowLabel = right o \"colorByRowLabel\" colorByRowLabel; groupByRowLabel = right o \"groupByRowLabel\" groupByRowLabel; showRowLabels = right o \"showRowLabels\" showRowLabels; singleColor = right o \"singleColor\" singleColor; barLabelStyle = copy o \"barLabelStyle\"; rowLabelStyle = copy o \"rowLabelStyle\" }\r\n    { x with options = { x.options with timeline = newNested } }\r\ntype Candlestick = \r\n  { data : ChartData; typeName : string; \r\n    options : CandlestickChartOptions }\r\n  interface Chart\r\n  member x.show(outputId) = Helpers.showChart x outputId\r\n  member x.set(?aggregationTarget:string,?axisTitlesPosition:string,?backgroundColor:obj,?colors:seq<string>,?enableInteractivity:bool,?focusTarget:string,?fontSize:float,?fontName:string,?height:float,?orientation:string,?reverseCategories:bool,?selectionMode:string,?series:obj,?theme:string,?title:string,?titlePosition:string,?vAxes:obj,?width:float) = \r\n    let o = x.options\r\n    let newOptions = { x.options with aggregationTarget = right o \"aggregationTarget\" aggregationTarget; axisTitlesPosition = right o \"axisTitlesPosition\" axisTitlesPosition; backgroundColor = right o \"backgroundColor\" backgroundColor; colors = right o \"colors\" (Option.map Array.ofSeq colors); enableInteractivity = right o \"enableInteractivity\" enableInteractivity; focusTarget = right o \"focusTarget\" focusTarget; fontSize = right o \"fontSize\" fontSize; fontName = right o \"fontName\" fontName; height = right o \"height\" height; orientation = right o \"orientation\" orientation; reverseCategories = right o \"reverseCategories\" reverseCategories; selectionMode = right o \"selectionMode\" selectionMode; series = right o \"series\" series; theme = right o \"theme\" theme; title = right o \"title\" title; titlePosition = right o \"titlePosition\" titlePosition; vAxes = right o \"vAxes\" vAxes; width = right o \"width\" width }\r\n    { x with options = newOptions }\r\n  member x.animation(?duration:float,?easing:string) =\r\n    let o = x.options.animation\r\n    let newNested = { TransitionAnimation.duration = right o \"duration\" duration; easing = right o \"easing\" easing;  }\r\n    { x with options = { x.options with animation = newNested } }\r\n  member x.bar(?groupWidth:obj) =\r\n    let o = x.options.bar\r\n    let newNested = { GroupWidth.groupWidth = right o \"groupWidth\" groupWidth;  }\r\n    { x with options = { x.options with bar = newNested } }\r\n  member x.candlestick(?hollowIsRising:bool) =\r\n    let o = x.options.candlestick\r\n    let newNested = { CandlestickCandlestick.hollowIsRising = right o \"hollowIsRising\" hollowIsRising; fallingColor = copy o \"fallingColor\"; risingColor = copy o \"risingColor\" }\r\n    { x with options = { x.options with candlestick = newNested } }\r\n  member x.chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\r\n    let o = x.options.chartArea\r\n    let newNested = { ChartArea.top = right o \"top\" top; left = right o \"left\" left; width = right o \"width\" width; height = right o \"height\" height;  }\r\n    { x with options = { x.options with chartArea = newNested } }\r\n  member x.hAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.hAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with hAxis = newNested } }\r\n  member x.legend(?alignment:string,?maxLines:float,?position:string,?numberFormat:string) =\r\n    let o = x.options.legend\r\n    let newNested = { ChartLegend.alignment = right o \"alignment\" alignment; maxLines = right o \"maxLines\" maxLines; position = right o \"position\" position; numberFormat = right o \"numberFormat\" numberFormat; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with legend = newNested } }\r\n  member x.titleTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    let o = x.options.titleTextStyle\r\n    let newNested = { ChartTextStyle.fontName = right o \"fontName\" fontName; fontSize = right o \"fontSize\" fontSize; bold = right o \"bold\" bold; italic = right o \"italic\" italic; color = right o \"color\" color; auraColor = right o \"auraColor\" auraColor; opacity = right o \"opacity\" opacity;  }\r\n    { x with options = { x.options with titleTextStyle = newNested } }\r\n  member x.tooltip(?isHtml:bool,?showColorCode:bool,?trigger:string) =\r\n    let o = x.options.tooltip\r\n    let newNested = { ChartTooltip.isHtml = right o \"isHtml\" isHtml; showColorCode = right o \"showColorCode\" showColorCode; trigger = right o \"trigger\" trigger; textStyle = copy o \"textStyle\" }\r\n    { x with options = { x.options with tooltip = newNested } }\r\n  member x.vAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?logScale:bool,?textPosition:string,?ticks:seq<obj>,?title:string,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string) =\r\n    let o = x.options.vAxis\r\n    let newNested = { ChartAxis.baseline = right o \"baseline\" baseline; baselineColor = right o \"baselineColor\" baselineColor; direction = right o \"direction\" direction; format = right o \"format\" format; logScale = right o \"logScale\" logScale; textPosition = right o \"textPosition\" textPosition; ticks = right o \"ticks\" (Option.map Array.ofSeq ticks); title = right o \"title\" title; allowContainerBoundaryTextCufoff = right o \"allowContainerBoundaryTextCufoff\" allowContainerBoundaryTextCufoff; slantedText = right o \"slantedText\" slantedText; slantedTextAngle = right o \"slantedTextAngle\" slantedTextAngle; maxAlternation = right o \"maxAlternation\" maxAlternation; maxTextLines = right o \"maxTextLines\" maxTextLines; minTextSpacing = right o \"minTextSpacing\" minTextSpacing; showTextEvery = right o \"showTextEvery\" showTextEvery; maxValue = right o \"maxValue\" maxValue; minValue = right o \"minValue\" minValue; viewWindowMode = right o \"viewWindowMode\" viewWindowMode; gridlines = copy o \"gridlines\"; minorGridlines = copy o \"minorGridlines\"; textStyle = copy o \"textStyle\"; titleTextStyle = copy o \"titleTextStyle\"; viewWindow = copy o \"viewWindow\" }\r\n    { x with options = { x.options with vAxis = newNested } }\r\n\r\ntype GeoChartOptions with\r\n  static member empty =\r\n    { GeoChartOptions.backgroundColor = undefined<_>(); colorAxis = undefined<_>(); datalessRegionColor = undefined<_>(); displayMode = undefined<_>(); enableRegionInteractivity = undefined<_>(); height = undefined<_>(); keepAspectRatio = undefined<_>(); legend = undefined<_>(); region = undefined<_>(); magnifyingGlass = undefined<_>(); markerOpacity = undefined<_>(); resolution = undefined<_>(); sizeAxis = undefined<_>(); tooltip = undefined<_>(); width = undefined<_>() }\r\ntype ScatterChartOptions with\r\n  static member empty =\r\n    { ScatterChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); annotations = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); crosshair = undefined<_>(); curveType = undefined<_>(); dataOpacity = undefined<_>(); enableInteractivity = undefined<_>(); explorer = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); forceIFrame = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); legend = undefined<_>(); lineWidth = undefined<_>(); pointSize = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); trendlines = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\r\ntype ColumnChartOptions with\r\n  static member empty =\r\n    { ColumnChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); annotations = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); bar = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); enableInteractivity = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); isStacked = undefined<_>(); legend = undefined<_>(); reverseCategories = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\r\ntype LineChartOptions with\r\n  static member empty =\r\n    { LineChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); annotations = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); crosshair = undefined<_>(); curveType = undefined<_>(); dataOpacity = undefined<_>(); enableInteractivity = undefined<_>(); explorer = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); interpolateNulls = undefined<_>(); legend = undefined<_>(); lineWidth = undefined<_>(); orientation = undefined<_>(); pointSize = undefined<_>(); reverseCategories = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\r\ntype BarChartOptions with\r\n  static member empty =\r\n    { BarChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); annotations = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); bar = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); dataOpacity = undefined<_>(); enableInteractivity = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxes = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); isStacked = undefined<_>(); legend = undefined<_>(); reverseCategories = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\r\ntype HistogramOptions with\r\n  static member empty =\r\n    { HistogramOptions.animation = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); bar = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); dataOpacity = undefined<_>(); enableInteractivity = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxis = undefined<_>(); histogram = undefined<_>(); height = undefined<_>(); interpolateNulls = undefined<_>(); isStacked = undefined<_>(); legend = undefined<_>(); orientation = undefined<_>(); reverseCategories = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\r\ntype AreaChartOptions with\r\n  static member empty =\r\n    { AreaChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); areaOpacity = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); crosshair = undefined<_>(); dataOpacity = undefined<_>(); enableInteractivity = undefined<_>(); explorer = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); interpolateNulls = undefined<_>(); isStacked = undefined<_>(); legend = undefined<_>(); lineWidth = undefined<_>(); orientation = undefined<_>(); pointSize = undefined<_>(); reverseCategories = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\r\ntype AnnotationChartOptions with\r\n  static member empty =\r\n    { AnnotationChartOptions.allowHtml = undefined<_>(); allValuesSuffix = undefined<_>(); annotationsWidth = undefined<_>(); colors = undefined<_>(); dateFormat = undefined<_>(); displayAnnotations = undefined<_>(); displayAnnotationsFilter = undefined<_>(); displayDateTimeBarSeparator = undefined<_>(); displayExactValues = undefined<_>(); displayLegendDots = undefined<_>(); displayLegendValues = undefined<_>(); displayRangeSelector = undefined<_>(); displayZoomButtons = undefined<_>(); fill = undefined<_>(); legendPosition = undefined<_>(); max = undefined<_>(); min = undefined<_>(); numberFormats = undefined<_>(); scaleColumns = undefined<_>(); scaleFormat = undefined<_>(); scaleType = undefined<_>(); thickness = undefined<_>(); zoomEndTime = undefined<_>(); zoomStartTime = undefined<_>() }\r\ntype SteppedAreaChartOptions with\r\n  static member empty =\r\n    { SteppedAreaChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); areaOpacity = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); connectSteps = undefined<_>(); enableInteractivity = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); interpolateNulls = undefined<_>(); isStacked = undefined<_>(); legend = undefined<_>(); reverseCategories = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\r\ntype PieChartOptions with\r\n  static member empty =\r\n    { PieChartOptions.backgroundColor = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); enableInteractivity = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); height = undefined<_>(); is3D = undefined<_>(); legend = undefined<_>(); pieHole = undefined<_>(); pieSliceBorderColor = undefined<_>(); pieSliceText = undefined<_>(); pieSliceTextStyle = undefined<_>(); pieStartAngle = undefined<_>(); reverseCategories = undefined<_>(); pieResidueSliceColor = undefined<_>(); pieResidueSliceLabel = undefined<_>(); slices = undefined<_>(); sliceVisibilityThreshold = undefined<_>(); title = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); width = undefined<_>() }\r\ntype BubbleChartOptions with\r\n  static member empty =\r\n    { BubbleChartOptions.animation = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); bubble = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); colorAxis = undefined<_>(); enableInteractivity = undefined<_>(); explorer = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); forceIFrame = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); legend = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); sizeAxis = undefined<_>(); sortBubblesBySize = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\r\ntype TreeMapOptions with\r\n  static member empty =\r\n    { TreeMapOptions.fontColor = undefined<_>(); fontFamily = undefined<_>(); fontSize = undefined<_>(); forceIFrame = undefined<_>(); headerColor = undefined<_>(); headerHeight = undefined<_>(); headerHighlightColor = undefined<_>(); hintOpacity = undefined<_>(); maxColor = undefined<_>(); maxDepth = undefined<_>(); maxHighlightColor = undefined<_>(); maxPostDepth = undefined<_>(); maxColorValue = undefined<_>(); midColor = undefined<_>(); midHighlightColor = undefined<_>(); minColor = undefined<_>(); minHighlightColor = undefined<_>(); minColorValue = undefined<_>(); showScale = undefined<_>(); showTooltips = undefined<_>(); textStyle = undefined<_>(); title = undefined<_>(); titleTextStyle = undefined<_>(); useWeightedAverageForAggregation = undefined<_>() }\r\ntype TableOptions with\r\n  static member empty =\r\n    { TableOptions.allowHtml = undefined<_>(); alternatingRowStyle = undefined<_>(); cssClassName = undefined<_>(); firstRowNumber = undefined<_>(); height = undefined<_>(); page = undefined<_>(); pageSize = undefined<_>(); rtlTable = undefined<_>(); scrollLeftStartPosition = undefined<_>(); showRowNumber = undefined<_>(); sort = undefined<_>(); sortAscending = undefined<_>(); sortColumn = undefined<_>(); startPage = undefined<_>(); width = undefined<_>() }\r\ntype TimelineOptions with\r\n  static member empty =\r\n    { TimelineOptions.avoidOverlappingGridLines = undefined<_>(); backgroundColor = undefined<_>(); colors = undefined<_>(); enableInteractivity = undefined<_>(); forceIFrame = undefined<_>(); height = undefined<_>(); timeline = undefined<_>(); width = undefined<_>() }\r\ntype CandlestickChartOptions with\r\n  static member empty =\r\n    { CandlestickChartOptions.aggregationTarget = undefined<_>(); animation = undefined<_>(); axisTitlesPosition = undefined<_>(); backgroundColor = undefined<_>(); bar = undefined<_>(); candlestick = undefined<_>(); chartArea = undefined<_>(); colors = undefined<_>(); enableInteractivity = undefined<_>(); focusTarget = undefined<_>(); fontSize = undefined<_>(); fontName = undefined<_>(); hAxis = undefined<_>(); height = undefined<_>(); legend = undefined<_>(); orientation = undefined<_>(); reverseCategories = undefined<_>(); selectionMode = undefined<_>(); series = undefined<_>(); theme = undefined<_>(); title = undefined<_>(); titlePosition = undefined<_>(); titleTextStyle = undefined<_>(); tooltip = undefined<_>(); vAxes = undefined<_>(); vAxis = undefined<_>(); width = undefined<_>() }\r\n\r\ntype options =\r\n  static member chartSizeAxis(?maxSize:float,?maxValue:float,?minSize:float,?minValue:float) =\r\n    { ChartSizeAxis.maxSize = orDefault maxSize; maxValue = orDefault maxValue; minSize = orDefault minSize; minValue = orDefault minValue }\r\n  static member chartTextStyle(?fontName:string,?fontSize:float,?bold:bool,?italic:bool,?color:string,?auraColor:string,?opacity:float) =\r\n    { ChartTextStyle.fontName = orDefault fontName; fontSize = orDefault fontSize; bold = orDefault bold; italic = orDefault italic; color = orDefault color; auraColor = orDefault auraColor; opacity = orDefault opacity }\r\n  static member chartTooltip(?isHtml:bool,?showColorCode:bool,?textStyle:ChartTextStyle,?trigger:string) =\r\n    { ChartTooltip.isHtml = orDefault isHtml; showColorCode = orDefault showColorCode; textStyle = orDefault textStyle; trigger = orDefault trigger }\r\n  static member chartLegend(?alignment:string,?maxLines:float,?position:string,?textStyle:ChartTextStyle,?numberFormat:string) =\r\n    { ChartLegend.alignment = orDefault alignment; maxLines = orDefault maxLines; position = orDefault position; textStyle = orDefault textStyle; numberFormat = orDefault numberFormat }\r\n  static member chartColorAxis(?minValue:float,?maxValue:float,?values:seq<float>,?colors:seq<string>,?legend:ChartLegend) =\r\n    { ChartColorAxis.minValue = orDefault minValue; maxValue = orDefault maxValue; values = orDefault (Option.map Array.ofSeq values); colors = orDefault (Option.map Array.ofSeq colors); legend = orDefault legend }\r\n  static member geoChartMagnifyingGlass(?enable:bool,?zoomFactor:float) =\r\n    { GeoChartMagnifyingGlass.enable = orDefault enable; zoomFactor = orDefault zoomFactor }\r\n  static member chartBoxStyleGradient(?color1:string,?color2:string,?x1:string,?y1:string,?x2:string,?y2:string,?useObjectBoundingBoxUnits:bool) =\r\n    { ChartBoxStyleGradient.color1 = orDefault color1; color2 = orDefault color2; x1 = orDefault x1; y1 = orDefault y1; x2 = orDefault x2; y2 = orDefault y2; useObjectBoundingBoxUnits = orDefault useObjectBoundingBoxUnits }\r\n  static member chartBoxStyle(?stroke:string,?strokeWidth:float,?rx:float,?ry:float,?gradient:ChartBoxStyleGradient) =\r\n    { ChartBoxStyle.stroke = orDefault stroke; strokeWidth = orDefault strokeWidth; rx = orDefault rx; ry = orDefault ry; gradient = orDefault gradient }\r\n  static member chartAnnotations(?boxStyle:ChartBoxStyle,?textStyle:ChartTextStyle) =\r\n    { ChartAnnotations.boxStyle = orDefault boxStyle; textStyle = orDefault textStyle }\r\n  static member chartCrosshairFocused(?color:string,?opacity:float) =\r\n    { ChartCrosshairFocused.color = orDefault color; opacity = orDefault opacity }\r\n  static member chartCrosshairSelected(?color:string,?opacity:float) =\r\n    { ChartCrosshairSelected.color = orDefault color; opacity = orDefault opacity }\r\n  static member chartCrosshair(?color:string,?focused:ChartCrosshairFocused,?opacity:float,?orientation:string,?selected:ChartCrosshairSelected,?trigger:string) =\r\n    { ChartCrosshair.color = orDefault color; focused = orDefault focused; opacity = orDefault opacity; orientation = orDefault orientation; selected = orDefault selected; trigger = orDefault trigger }\r\n  static member chartExplorer(?actions:seq<string>,?axis:string,?keepInBounds:bool,?maxZoomIn:float,?maxZoomOut:float,?zoomDelta:float) =\r\n    { ChartExplorer.actions = orDefault (Option.map Array.ofSeq actions); axis = orDefault axis; keepInBounds = orDefault keepInBounds; maxZoomIn = orDefault maxZoomIn; maxZoomOut = orDefault maxZoomOut; zoomDelta = orDefault zoomDelta }\r\n  static member chartStroke(?stroke:string,?strokeWidth:float,?fill:string) =\r\n    { ChartStroke.stroke = orDefault stroke; strokeWidth = orDefault strokeWidth; fill = orDefault fill }\r\n  static member chartArea(?top:obj,?left:obj,?width:obj,?height:obj) =\r\n    { ChartArea.top = orDefault top; left = orDefault left; width = orDefault width; height = orDefault height }\r\n  static member transitionAnimation(?duration:float,?easing:string) =\r\n    { TransitionAnimation.duration = orDefault duration; easing = orDefault easing }\r\n  static member chartGridlines(?color:string,?count:float) =\r\n    { ChartGridlines.color = orDefault color; count = orDefault count }\r\n  static member chartViewWindow(?max:float,?min:float) =\r\n    { ChartViewWindow.max = orDefault max; min = orDefault min }\r\n  static member chartAxis(?baseline:float,?baselineColor:string,?direction:float,?format:string,?gridlines:ChartGridlines,?minorGridlines:ChartGridlines,?logScale:bool,?textPosition:string,?textStyle:ChartTextStyle,?ticks:seq<obj>,?title:string,?titleTextStyle:ChartTextStyle,?allowContainerBoundaryTextCufoff:bool,?slantedText:bool,?slantedTextAngle:float,?maxAlternation:float,?maxTextLines:float,?minTextSpacing:float,?showTextEvery:float,?maxValue:float,?minValue:float,?viewWindowMode:string,?viewWindow:ChartViewWindow) =\r\n    { ChartAxis.baseline = orDefault baseline; baselineColor = orDefault baselineColor; direction = orDefault direction; format = orDefault format; gridlines = orDefault gridlines; minorGridlines = orDefault minorGridlines; logScale = orDefault logScale; textPosition = orDefault textPosition; textStyle = orDefault textStyle; ticks = orDefault (Option.map Array.ofSeq ticks); title = orDefault title; titleTextStyle = orDefault titleTextStyle; allowContainerBoundaryTextCufoff = orDefault allowContainerBoundaryTextCufoff; slantedText = orDefault slantedText; slantedTextAngle = orDefault slantedTextAngle; maxAlternation = orDefault maxAlternation; maxTextLines = orDefault maxTextLines; minTextSpacing = orDefault minTextSpacing; showTextEvery = orDefault showTextEvery; maxValue = orDefault maxValue; minValue = orDefault minValue; viewWindowMode = orDefault viewWindowMode; viewWindow = orDefault viewWindow }\r\n  static member chartBoundingBox(?left:float,?top:float,?width:float,?height:float) =\r\n    { ChartBoundingBox.left = orDefault left; top = orDefault top; width = orDefault width; height = orDefault height }\r\n  static member groupWidth(?groupWidth:obj) =\r\n    { GroupWidth.groupWidth = orDefault groupWidth }\r\n  static member trendline(?color:string,?lineWidth:float,?labelInLegend:string,?opacity:float,?pointSize:float,?pointsVisible:bool,?showR2:bool,?``type``:string,?visibleInLegend:float) =\r\n    { Trendline.color = orDefault color; lineWidth = orDefault lineWidth; labelInLegend = orDefault labelInLegend; opacity = orDefault opacity; pointSize = orDefault pointSize; pointsVisible = orDefault pointsVisible; showR2 = orDefault showR2; ``type`` = orDefault ``type``; visibleInLegend = orDefault visibleInLegend }\r\n  static member histogramHistogram(?bucketSize:float,?hideBucketItems:bool,?lastBucketPercentile:float) =\r\n    { HistogramHistogram.bucketSize = orDefault bucketSize; hideBucketItems = orDefault hideBucketItems; lastBucketPercentile = orDefault lastBucketPercentile }\r\n  static member chartBubble(?opacity:float,?stroke:string,?textStyle:ChartTextStyle) =\r\n    { ChartBubble.opacity = orDefault opacity; stroke = orDefault stroke; textStyle = orDefault textStyle }\r\n  static member cssClassNames(?headerRow:string,?tableRow:string,?oddTableRow:string,?selectedTableRow:string,?hoverTableRow:string,?headerCell:string,?tableCell:string,?rowNumberCell:string) =\r\n    { CssClassNames.headerRow = orDefault headerRow; tableRow = orDefault tableRow; oddTableRow = orDefault oddTableRow; selectedTableRow = orDefault selectedTableRow; hoverTableRow = orDefault hoverTableRow; headerCell = orDefault headerCell; tableCell = orDefault tableCell; rowNumberCell = orDefault rowNumberCell }\r\n  static member labelStyle(?color:string,?fontName:string,?fontSize:string) =\r\n    { LabelStyle.color = orDefault color; fontName = orDefault fontName; fontSize = orDefault fontSize }\r\n  static member timelineTimeline(?barLabelStyle:LabelStyle,?colorByRowLabel:bool,?groupByRowLabel:bool,?rowLabelStyle:LabelStyle,?showRowLabels:bool,?singleColor:string) =\r\n    { TimelineTimeline.barLabelStyle = orDefault barLabelStyle; colorByRowLabel = orDefault colorByRowLabel; groupByRowLabel = orDefault groupByRowLabel; rowLabelStyle = orDefault rowLabelStyle; showRowLabels = orDefault showRowLabels; singleColor = orDefault singleColor }\r\n  static member candlestickCandlestick(?hollowIsRising:bool,?fallingColor:ChartStroke,?risingColor:ChartStroke) =\r\n    { CandlestickCandlestick.hollowIsRising = orDefault hollowIsRising; fallingColor = orDefault fallingColor; risingColor = orDefault risingColor }\r\n"]}