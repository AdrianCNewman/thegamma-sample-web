{"version":3,"sources":["../../../../src/libraries/google/core.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAUO;AAAA;AACS,GADT;;sCAVP;AAAA;;AAAA;AAAA,G;;;;AAyBO;AAzBP,+BAoCI;AAAA;AAAuD,KApC3D;;AAAA,yCAuCU;AAAA;AAAQ,KAvClB;;AAAA,iCA4CU;AAAA;AAAQ,KA5ClB;;AAAA,yCAqDI;AAAA,gBACE;AAAA,SAMK;AAAA;AAAoB,SANzB;AAAA,gCACE;AAAA,mDACE;AAAA,uDACA;AAAA;AAAA;AAA0C,eAD1C;AAAA,aADF,GAIE;AAAA,2BAAqB,gCAArB;AAAA;AAAwD,aAJ1D;AAAA,WADF;AAAA;AAMyB,OAP3B;AAO4B,KA5DhC;;AAyBO;AAzBP,GAyBO;;AAqCA;AA9DP,qCA+DwB;AAAA;AAAA,8BACd;AAAA,kCAKE,gBAAO,qBAAP,CALF,GAEF,cAAS,SAAT,EACA;AAAA,iCAAU,kBAAV,EACA;AAAA,qCAAO,oCAAP;AAAA,aADA;AAAA,WADA,CAFE;AAAA,SADc;AAAA;AAAK,KA/D7B;;AAAA,6CAuEkD;AAAA,2BAAS;AAAA,8BACnD;AAAO;AACX;AACA;AACA,+BAA8D,0CAAlD;AAAA;AAAA;AAAA;AAAA,YAAkD,MAA9D,EACA;AAAA,aAAyB;AAAA;AAAY,aAArC,EAAQ,UAAU;AAAA;AAAA,aAAV,CAAR;;AACA;AAAW,WAFX;AAHQ,SAD+C;AAAA,0CAAT;AAM/B,KA7EnB;;AAAA,qDA+E8D;AAAA,2BAAS;AAAA,8BAC/D;AAAO;AACX;AACA;AACA;AACA,+BAA8E,0CAAlE;AAAA;AAAA;AAAA;AAAA,YAAkE,MAA9E,EACA;AAAA,aAAyB;AAAA;AAAY,aAArC,EAAQ,UAAU;AAAA;AAAA,aAAV,CAAR;;AACA;AAAW,WAFX;AAJQ,SAD2D;AAAA,0CAAT;AAO3C,KAtFnB;;AAAA,2DAwFmE;AAAA,2BAAS;AAAA,8BACpE;AAAO;AACX;AACA;AACA,yBAAgC;AAAA;AAAA;AAAA,WAAhC;AACA,+BAAkD,QAAyB;AAAA;AAAA,sCACzE;AAAA,uCAAoD,0CAAzC;AAAA;AAAA;AAAA;AAAA,kBAAyC,MAApD,EACA;AAAA,2CAA+B,wBAAjB,UAAU;AAAA;AAAA,mBAAV,CAAiB,CAA/B;AAAA,iBADA;AAAA,eADyE;AAAA;AAAA,WAAzB,EAAhB,wBAAvB,0CAAuB,CAAgB,CAAlD,EAIA;AAAA,aAGG;AAAA;AAAY,aAHf,EACiD,WAA9C;AAAA,8CAA4B;AAAA;AAAA,eAA5B,KAA4B;AAAA;AAAA,eAA5B;AAAA,sBAA8C,CAC9C;AAAA;AAAA,cAFH;;AAKA;AAAW,WATX;AAJQ,SADgE;AAAA,0CAAT;AAchD,KAtGnB;;AAAA,iDA8HgE;AAAA,2BAAS;AAAA,8BACjE;AAAO;AACX,+BAAmB,iDAAnB,EACI;AAAI,gCAAU;AAAA;AAAA,aAAV;;AACR;AACA,iDAAS,wBAAK,cAAL,CAAT,EACE;AAAA;AAAA;AAAoD,aADtD,kBAGI;AAAO,oCAAmB;AAAA,6CAAW,mCAAX;AAAA;AAAA;AAAA,eAAnB;AAC0C;AAAA,wBAAuB,KAAvB;AAAA,iBAA1C,iCAAyB,cAAzB,MAA0C;;AAC3B,4CACxB;AAAA,sDACQ;AAAA,8EAAa;AAAA;AAAA,qBAAb;;AAAA,6CAEQ;AAAA;AAAE,mBAFV,MACU;AAAA;AAAA;AAAc;AADC,iBADjC;AAAA,eADwB;;AAM1B,mCAEyC,0CAF7B,aACN;AAAA;AAAO,gFAAmC;AAAA,2BAAY,+BAAZ,WAAY,+BAAZ;AAAA,mBAAnC;AACX;AADQ,iBAAJ;AAAA,eADM,CAE6B,MAFzC,EAGA;AAAA,iBAAyB;AAAA;AAAY,iBAArC,EAAQ,UAAU;AAAA;AAAA,iBAAV,CAAR;;AACA;AAAW,eAJX;AARQ,aAHR;AAFK,WADL;AADQ,SAD6D;AAAA,0CAAT;AAoB7C,KAlJnB;;AAAA,yCAoJ+D;AAAA,2BAAS;AAAA,8BAChE;AAAO;AACX;AACA;AACA,+BAA8E,0CAAlE;AAAA;AAAA,YAAkE,MAA9E,EACA;AAAA,aAAyB;AAAA;AAAY,aAArC,EAAQ,UAAU;AAAA;AAAA,aAAV,CAAR;;AACA;AAAW,WAFX;AAHQ,SAD4D;AAAA,0CAAT;AAM5C,KA1JnB;;AA8DO;AA9DP,GA8DO","file":"core.js","sourceRoot":"C:/Tomas/Public/thegamma/thegamma-script/out/src/libraries","sourcesContent":["ï»¿// --------------------------------------------------------------------------------------------------------------------\r\n// Google chart API\r\n// --------------------------------------------------------------------------------------------------------------------\r\nnamespace TheGamma.GoogleCharts\r\n\r\nopen TheGamma.Common\r\nopen TheGamma.Series\r\nopen Fable.Core\r\nopen Fable.Import\r\n\r\nmodule GoogleCharts = \r\n  type DataTable =\r\n    abstract addRows : obj[][] -> unit\r\n    abstract addColumn : string * string -> unit \r\n    \r\n  [<Emit(\"new google.visualization.DataTable()\")>]\r\n  let createTable() : DataTable = failwith \"Never\"\r\n\r\n\r\ntype ChartData =\r\n  { data : Async<GoogleCharts.DataTable> }\r\n\r\ntype Chart = interface end\r\n\r\n[<ReflectedDefinition>]\r\nmodule Helpers =\r\n  [<Emit(\"undefined\")>]\r\n  let undefined<'T>() : 'T = failwith \"!\"\r\n\r\n  [<Emit(\"$0==null\")>]\r\n  let isNull(o:obj) : bool = failwith \"never\"\r\n\r\n  [<Emit(\"$0[$1]\")>]\r\n  let getProperty<'T> (obj:obj) (name:string) : 'T = failwith \"never\"\r\n\r\n  let copy o prop =\r\n    if isNull o then undefined<_>() else getProperty o prop\r\n\r\n  let orDefault newValue =\r\n    match newValue with\r\n    | Some a -> a\r\n    | _ -> undefined<_>()\r\n\r\n  let right o prop newValue =\r\n    match newValue with\r\n    | Some a -> a\r\n    | _ when isNull o -> undefined<_>()\r\n    | _ -> getProperty o prop\r\n\r\n  [<Emit(\"drawChart($0);\")>]\r\n  let drawChart (f:(obj[] -> unit) -> unit) : unit = failwith \"!\"\r\n\r\n  let showChart (chart:#Chart) (outputId:string) =\r\n    drawChart (fun cont ->\r\n      async {\r\n        try\r\n          let! dt = (getProperty<ChartData> chart \"data\").data\r\n          cont [| box chart; box dt; box outputId |]\r\n        with e ->\r\n          Browser.window.alert(\"SOmething went wrong: \" + unbox e) }\r\n        |> Async.StartImmediate)\r\n\r\nmodule ChartDataOperations =\r\n  let rec collect f l = async {\r\n    match l with \r\n    | x::xs -> \r\n        let! y = f x\r\n        let! ys = collect f xs\r\n        return List.append y ys\r\n    | [] -> return [] }\r\n\r\n  let oneKeyValue keyType (v:series<'k, float>) = { data = async {\r\n    let data = GoogleCharts.createTable()\r\n    data.addColumn(keyType, v.keyName) |> ignore\r\n    data.addColumn(\"number\", v.seriesName) |> ignore\r\n    let! vals = v.mapPairs(fun k v -> [| box k; box v |]).data |> Async.AwaitFuture\r\n    vals |> Array.map snd |> data.addRows |> ignore\r\n    return data } }\r\n\r\n  let oneKeyTwoValues keyType (v:series<'k, float * float>) = { data = async {\r\n    let data = GoogleCharts.createTable()\r\n    data.addColumn(keyType, v.keyName) |> ignore\r\n    data.addColumn(\"number\", v.seriesName) |> ignore\r\n    data.addColumn(\"number\", v.seriesName) |> ignore\r\n    let! vals = v.mapPairs(fun k (v1, v2) -> [| box k; box v1; box v2 |]).data |> Async.AwaitFuture\r\n    vals |> Array.map snd |> data.addRows |> ignore\r\n    return data } }\r\n\r\n  let oneKeyAppendValues keyType (vs:series<'k, float>[]) colors = { data = async {\r\n    let data = GoogleCharts.createTable()\r\n    data.addColumn(keyType, vs.[0].keyName) |> ignore\r\n    data.addColumn(\"number\", vs.[0].valueName) |> ignore\r\n    JsInterop.(?) data \"addColumn\" (JsInterop.createObj [ \"type\", box \"string\"; \"role\", box \"style\" ]) |> ignore    \r\n    let! all = Array.zip vs colors |> List.ofArray |> collect (fun (v, clr) -> async {\r\n      let! res = v.mapPairs(fun k v -> k, v, clr).data |> Async.AwaitFuture\r\n      return res |> Array.map snd |> List.ofArray })\r\n\r\n    all \r\n    |> List.sortByDescending (fun (_, v, _) -> v) |> Array.ofList\r\n    |> Array.map (fun (k, v, c) -> [| box k; box v; box c |])\r\n    |> data.addRows \r\n\r\n    return data } }\r\n\r\n(*\r\n  let oneKeyNValues keyType (v:seq<series<'k, float>>) = { data = async {\r\n    let data = GoogleCharts.createTable()\r\n    let v = Array.ofSeq v\r\n    data.addColumn(keyType, v.[0].keyName) |> ignore\r\n    for i in 0 .. v.Length - 1 do\r\n      data.addColumn(\"number\", v.[i].seriesName) |> ignore\r\n\r\n    let head = v.[0].map(fun v -> Map.ofList [0,v])\r\n    let tail = SeriesInternals.slice 1 (v.Length-1) v |> Array.mapi (fun i v -> i+1, v)\r\n    let all = (head,tail) ||> Array.fold (fun s1 (i, s2) ->\r\n      s1.joinOuter(s2).map(fun (l, r) ->\r\n        match defaultArg l Map.empty, r with\r\n        | lm, Some r -> Map.add i r lm\r\n        | lm, None -> lm ))\r\n\r\n    let! vals = all.mapPairs(fun k vals ->\r\n      let data = Array.init v.Length (fun i -> box (defaultArg (Map.tryFind i vals) (Helpers.undefined<_>())))\r\n      Array.append [| box k |] data).data\r\n    vals |> Array.map snd |> data.addRows |> ignore\r\n    return data } }\r\n*)\r\n  let oneKeyNValues keyType (v:series<'a, series<'k, float>>) = { data = async {\r\n    let data = GoogleCharts.createTable()\r\n    let! v = v.data |> Async.AwaitFuture\r\n    let v = Array.map snd v\r\n    data.addColumn(keyType, v.[0].keyName) |> ignore\r\n    for i in 0 .. v.Length - 1 do\r\n      data.addColumn(\"number\", v.[i].seriesName) |> ignore\r\n\r\n    let head = v.[0].map(fun v -> Map.ofList [0,v])\r\n    let tail = SeriesInternals.slice 1 (v.Length-1) v |> Array.mapi (fun i v -> i+1, v)\r\n    let all = (head,tail) ||> Array.fold (fun s1 (i, s2) ->\r\n      s1.joinOuter(s2).map(fun (l, r) ->\r\n        match defaultArg l Map.empty, r with\r\n        | lm, Some r -> Map.add i r lm\r\n        | lm, None -> lm ))\r\n\r\n    let! vals = all.mapPairs(fun k vals ->\r\n      let data = Array.init v.Length (fun i -> box (defaultArg (Map.tryFind i vals) (Helpers.undefined<_>())))\r\n      Array.append [| box k |] data).data |> Async.AwaitFuture\r\n    vals |> Array.map snd |> data.addRows |> ignore\r\n    return data } }\r\n\r\n  let twoValues (v1:series<'k, float>) (v2:series<'k,float>) = { data = async {\r\n    let data = GoogleCharts.createTable()\r\n    data.addColumn(\"number\", v1.seriesName) |> ignore\r\n    data.addColumn(\"number\", v2.seriesName) |> ignore\r\n    let! vals = v1.joinInner(v2).map(fun (v1,v2) -> [| box v1; box v2 |]).data |> Async.AwaitFuture\r\n    vals |> Array.map snd |> data.addRows |> ignore\r\n    return data } }\r\n"]}