{"version":3,"sources":["../../../../src/libraries/google/charts.fs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDASI;AAAA,qCAAiB,+CAAjB,kBACuC,2DADvC;AACkE,K;;mCAGlE;AAAA,iCAAa,qDAAb,cACmC,uDADnC;AAC0D,K;;mCAO1D;AAAA,iCAAa,qDAAb,cACmC,uDADnC;AAC0D,K;;mCAG1D;AAAA,iCAAa,qDAAb,cACmC,uDADnC;AAC0D,K;;yCAU1D;AAAA,oCAAgB,qDAAhB,iBACsC,0DADtC;AACgE,K;;mDAGhE;AAAA,kCAAc,oEAAd,iBACsC,wDADtC;AAC8D,K;;qCAG9D;AAAA,kCAAc,qDAAd,eACoC,wDADpC;AAC4D,K;;uCAG5D;AAAA,kCAAc,uDAAd,eACoC,wDADpC;AAC4D,K;;qCAiB5D;AAAA,kCAAc,qDAAd,eACoC,wDADpC;AAC4D,K;;8CAGxD;AAAI;AAAA;AAAA;AAEA,0CACU,SAAkB;AAAA;AAAQ,iDAAkC,cAAlC;AAA6C,OAAvE,CADV;AAGR,kCAAc,yDAAd,eACoC,wDADpC;AALK,K;;wCAyBL;AAAA;AAAA;AAAwB,OAAxB;AAAwB,K","file":"charts.js","sourceRoot":"C:/Tomas/Public/thegamma/thegamma-script/out/src/libraries","sourcesContent":["namespace TheGamma.GoogleCharts\r\n\r\nopen System\r\nopen TheGamma\r\nopen TheGamma.Series\r\nopen TheGamma.GoogleCharts\r\n\r\ntype chart =\r\n  static member scatter(xval:series<_, _>, yval:series<_, _>) = \r\n    { Scatter.data = ChartDataOperations.twoValues xval yval; \r\n      typeName = \"ScatterChart\"; options = ScatterChartOptions.empty }\r\n\r\n  static member geo(data:series<string, float>) = \r\n    { Geo.data = ChartDataOperations.oneKeyValue \"string\" data; \r\n      typeName = \"GeoChart\"; options = GeoChartOptions.empty }\r\n  (*\r\n  static member geo(data:series<string, float * float>) = \r\n    { Geo.data = ChartDataOperations.oneKeyTwoValues \"string\" data; \r\n      typeName = \"GeoChart\"; options = GeoChartOptions.empty }\r\n  *)\r\n  static member pie(data:series<string, float>) = \r\n    { Pie.data = ChartDataOperations.oneKeyValue \"string\" data; \r\n      typeName = \"PieChart\"; options = PieChartOptions.empty }\r\n\r\n  static member bar(data:series<string, float>) = \r\n    { Bar.data = ChartDataOperations.oneKeyValue \"string\" data; \r\n      typeName = \"BarChart\"; options = BarChartOptions.empty }\r\n  (*\r\n  static member bar(data:seq<series<string, float>>) = \r\n    { Bar.data = ChartDataOperations.oneKeyNValues \"string\" data; \r\n      typeName = \"BarChart\"; options = BarChartOptions.empty }\r\n  static member column(data:seq<series<string, float>>) = \r\n    { Column.data = ChartDataOperations.oneKeyNValues \"string\" data; \r\n      typeName = \"ColumnChart\"; options = ColumnChartOptions.empty }\r\n  *)\r\n  static member column(data:series<string, float>) = \r\n    { Column.data = ChartDataOperations.oneKeyValue \"string\" data; \r\n      typeName = \"ColumnChart\"; options = ColumnChartOptions.empty }\r\n\r\n  static member columns(data:series<string, float>[], colors:string[]) = \r\n    { Line.data = ChartDataOperations.oneKeyAppendValues \"string\" data colors; \r\n      typeName = \"ColumnChart\"; options = LineChartOptions.empty }\r\n\r\n  static member line(data:series<int, float>) = \r\n    { Line.data = ChartDataOperations.oneKeyValue \"number\" data; \r\n      typeName = \"LineChart\"; options = LineChartOptions.empty }\r\n\r\n  static member lines(data:series<'a, series<int, float>>) = \r\n    { Line.data = ChartDataOperations.oneKeyNValues \"number\" data; \r\n      typeName = \"LineChart\"; options = LineChartOptions.empty }\r\n(*\r\n  static member line(data:series<string, float>) = \r\n    { Line.data = ChartDataOperations.oneKeyValue \"string\" data; \r\n      typeName = \"LineChart\"; options = LineChartOptions.empty }\r\n  static member line(data:seq<series<string, float>>) = \r\n    { Line.data = ChartDataOperations.oneKeyNValues \"string\" data; \r\n      typeName = \"LineChart\"; options = LineChartOptions.empty }\r\n  static member line(data:seq<series<int, float>>) = \r\n    { Line.data = ChartDataOperations.oneKeyNValues \"number\" data; \r\n      typeName = \"LineChart\"; options = LineChartOptions.empty }\r\n*)\r\n(*\r\n  static member histogram(data) = \r\n    { Histogram.data = data; options = HistogramOptions.empty }\r\n*)\r\n  static member area(data:series<int, float>) = \r\n    { Area.data = ChartDataOperations.oneKeyValue \"number\" data; \r\n      typeName = \"AreaChart\"; options = AreaChartOptions.empty }\r\n\r\n  static member areas(data:series<'a, series<int, float>>, ?names:string[]) = \r\n    let i = ref 0;\r\n    let data = \r\n      match names with \r\n      | Some names -> data.map(fun s -> incr i; s.setProperties(seriesName=names.[i.Value-1]))\r\n      | None -> data\r\n    { Area.data = ChartDataOperations.oneKeyNValues \"number\" data; \r\n      typeName = \"AreaChart\"; options = AreaChartOptions.empty }\r\n(*\r\n  static member annotation(data) = \r\n    { Annotation.data = data; options = AnnotationChartOptions.empty }\r\n  static member steppedArea(data) = \r\n    { SteppedArea.data = data; options = SteppedAreaChartOptions.empty }\r\n  static member bubble(data) = \r\n    { Bubble.data = data; options = BubbleChartOptions.empty }\r\n  static member treeMap(data) = \r\n    { TreeMap.data = data; options = TreeMapOptions.empty }\r\n  static member table(data) = \r\n    { Table.data = data; options = TableOptions.empty }\r\n  static member timeline(data) = \r\n    { Timeline.data = data; options = TimelineOptions.empty }\r\n  static member candlestick(data) = \r\n    { Candlestick.data = data; options = CandlestickChartOptions.empty }\r\n*)\r\n\r\n  static member show(chart:#Chart) = \r\n    Helpers.showChart(chart)"]}