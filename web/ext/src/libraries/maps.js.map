{"version":3,"sources":["../../../src/libraries/maps.fs"],"names":[],"mappings":"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","file":"maps.js","sourceRoot":"C:/Tomas/Public/thegamma/thegamma-script/out/src/libraries","sourcesContent":["namespace TheGamma.Maps\r\n\r\nopen System\r\nopen TheGamma\r\nopen TheGamma.Series\r\nopen TheGamma.Html\r\nopen TheGamma.Common\r\nopen Fable.Import.Browser\r\nopen Fable.Core\r\n\r\ntype GeographyConfig = \r\n  { popupOnHover : bool\r\n    highlightOnHover : bool }\r\n  \r\ntype DatamapConfig = \r\n  { element : HTMLElement\r\n    scope : string\r\n    geographyConfig : GeographyConfig\r\n    fills: obj\r\n    data: obj }\r\n\r\ntype BubblesConfig = \r\n  { popupTemplate : System.Func<obj, obj, string>\r\n    key : System.Func<obj, string> }\r\n\r\ntype IDatamap = \r\n  abstract bubbles : data:obj * config:BubblesConfig -> unit\r\n\r\nmodule JsDatamap = \r\n  [<Emit(\"new Datamap($0)\")>]\r\n  let create(config:DatamapConfig) : IDatamap = failwith \"JS\"\r\n\r\nmodule JsHelpers = \r\n  [<Emit(\"$0[$1]\")>]\r\n  let getProp (o:obj) (prop:string) : 'T = failwith \"JS\"\r\n\r\nopen JsHelpers\r\n\r\n(*\r\nvar bombMap = new Datamap({\r\n    element: document.getElementById('map'),\r\n    scope: 'world',\r\n    geographyConfig: {\r\n        popupOnHover: false,\r\n        highlightOnHover: false\r\n    },\r\n    fills: {\r\n        'USA': '#1f77b4',\r\n        'RUS': '#9467bd',\r\n        'PRK': '#ff7f0e',\r\n        'PRC': '#2ca02c',\r\n        'IND': '#e377c2',\r\n        'GBR': '#8c564b',\r\n        'FRA': '#d62728',\r\n        'PAK': '#7f7f7f',\r\n        defaultFill: '#EDDC4E'\r\n    },\r\n    data: {\r\n        'RUS': {fillKey: 'RUS'},\r\n        'PRK': {fillKey: 'PRK'},\r\n        'PRC': {fillKey: 'PRC'},\r\n        'IND': {fillKey: 'IND'},\r\n        'GBR': {fillKey: 'GBR'},\r\n        'FRA': {fillKey: 'FRA'},\r\n        'PAK': {fillKey: 'PAK'},\r\n        'USA': {fillKey: 'USA'}\r\n    }\r\n});\r\n function bombs() { return [{\r\n    name: 'Joe 4',\r\n    radius: Math.random() * 100,\r\n    yield: 400,\r\n    country: 'USSR',\r\n    fillKey: 'RUS',\r\n    significance: 'First fusion weapon test by the USSR (not \"staged\")',\r\n    date: '1953-08-12',\r\n    latitude: 50.07,\r\n    longitude: 78.43\r\n  },{\r\n    name: 'RDS-37',\r\n    radius: Math.random() * 100,\r\n    yield: 1600,\r\n    country: 'USSR',\r\n    fillKey: 'RUS',\r\n    significance: 'First \"staged\" thermonuclear weapon test by the USSR (deployable)',\r\n    date: '1955-11-22',\r\n    latitude: 50.07,\r\n    longitude: 78.43\r\n  },{\r\n    name: 'Tsar Bomba',\r\n    radius: Math.random() * 100,\r\n    yield: 50000,\r\n    country: 'USSR',\r\n    fillKey: 'RUS',\r\n    significance: 'Largest thermonuclear weapon ever testedï¿½scaled down from its initial 100 Mt design by 50%',\r\n    date: '1961-10-31',\r\n    latitude: 73.482,\r\n    longitude: 54.5854\r\n  }\r\n  ];  }\r\nbombMap.bubbles(bombs(), {\r\n    popupTemplate: function (geo, data) {\r\n            return ['<div class=\"hoverinfo\">' +  data.name,\r\n            '<br/>Payload: ' +  data.yield + ' kilotons',\r\n            '<br/>Country: ' +  data.country + '',\r\n            '<br/>Date: ' +  data.date + '',\r\n            '</div>'].join('');\r\n    }\r\n});\r\nsetInterval(function() {\r\n\tbombMap.bubbles(bombs(), {\r\n\t    popupTemplate: function (geo, data) {\r\n\t            return ['<div class=\"hoverinfo\">' +  data.name,\r\n\t            '<br/>Payload: ' +  data.yield + ' kilotons',\r\n\t            '<br/>Country: ' +  data.country + '',\r\n\t            '<br/>Date: ' +  data.date + '',\r\n\t            '</div>'].join('');\r\n\t    }\r\n\t});\r\n}, 5000);\r\n*)\r\nmodule GeoGlobals = \r\n  type Locations = \r\n    { country : string\r\n      coordinates : float[] }\r\n\r\n  let locations = \r\n    async { \r\n      let! json = Http.Request(\"GET\", \"/data/locations.json\") \r\n      let lookup = \r\n        jsonParse<Locations[]> json \r\n        |> Array.map (fun l -> l.country, l.coordinates)\r\n        |> Map.ofArray\r\n      return lookup } |> Async.CreateNamedFuture \"locations\"\r\n\r\ntype geo =\r\n  static member lookup (country:string) = async {\r\n    let! locs = GeoGlobals.locations |> Async.AwaitFuture\r\n    return defaultArg (locs.TryFind(country)) [| 0.0; 0.0 |] }\r\n\r\ntype math = \r\n  static member sqrt(f:float) = sqrt f\r\n  static member pow(f:float, k) = Math.Pow(f, k)\r\n  static member log(f:float, ?b) = match b with Some b -> Math.Log(f, b) | _ -> log f\r\n  static member min(f1:float, f2:float) = min f1 f2\r\n  static member max(f1:float, f2:float) = max f1 f2\r\n  static member add(f1:float, f2:float) = f1 + f2\r\n  static member times(f1:float, f2:float) = f1 * f2\r\n  static member sub(f1:float, f2:float) = f1 - f2\r\n  static member div(f1:float, f2:float) = f1 / f2\r\n\r\n\r\ntype timeline<'k,'v> =\r\n  { data : series<'k,'v> \r\n    colors : string[]\r\n    titleTemplate : string\r\n    defaultFill : string\r\n    delay : int\r\n    overflowDelay : int\r\n    infoSelector : 'v -> string\r\n    locSelector : 'v -> Async<int[]>\r\n    sizeSelector : 'v -> float\r\n    detailsSelector : option<'v -> obj[]>\r\n    timeSelector : 'v -> int }\r\n\r\n  static member create(data:series<_, _>) =\r\n    { timeline.data = data \r\n      colors = [| \"red\" |]\r\n      defaultFill = \"blue\"\r\n      delay = 750\r\n      detailsSelector = None\r\n      overflowDelay = 2000\r\n      titleTemplate = \"%title\"\r\n      infoSelector = fun _ -> \"\"\r\n      timeSelector = fun _ -> 0 \r\n      sizeSelector = fun _ -> 10.0\r\n      locSelector = fun _ -> failwith \"!\" }\r\n\r\n  member t.set(?fill, ?colors, ?title, ?delay, ?overflowDelay, ?details) = \r\n    { t with \r\n        colors = defaultArg colors t.colors; defaultFill = defaultArg fill t.defaultFill \r\n        titleTemplate = defaultArg title t.titleTemplate; delay = defaultArg delay t.delay\r\n        detailsSelector = match details with Some d -> Some d | _ -> t.detailsSelector\r\n        overflowDelay = defaultArg overflowDelay t.overflowDelay  }\r\n\r\n  member t.using(coordinates, time, size, info) = \r\n    { t with \r\n        locSelector = coordinates; timeSelector = time; sizeSelector = size \r\n        infoSelector = info }\r\n\r\n  member t.show(outputId) =\r\n    let id = \"map\" + DateTime.Now.Ticks.ToString()\r\n    h?div [\"class\" => \"map\"] [\r\n      h?div [\"id\" => id + \"_title\"] [text \"\"]\r\n      h?div [\"id\" => id; \"class\" => \"mapcontainer\" ] [] \r\n      h?div [] [\r\n        h?div [\"class\" => \"buttons\"] [ h?a [\"id\" => id + \"_btn\"] [ h?i [\"class\" => \"fa fa-pause\"] [] ] ]\r\n        h?input [\"id\" => id + \"_player\"; \"type\" => \"range\"] []\r\n      ]\r\n    ] |> renderTo (document.getElementById(outputId))\r\n\r\n    let fills = t.colors |> Array.mapi (fun i c -> sprintf \"item%d\" i, box c)\r\n    let map = \r\n      { element = document.getElementById(id)\r\n        scope = \"world\"\r\n        geographyConfig = { popupOnHover = false;  highlightOnHover = false }\r\n        fills = JsInterop.createObj ((\"defaultFill\", box t.defaultFill)::(List.ofArray fills))\r\n        data = JsInterop.createObj [] }\r\n      |> JsDatamap.create\r\n\r\n    let objects (data:_[]) infos time = \r\n      let res = ResizeArray<_>()\r\n      for i in 0 .. data.Length - 1 do\r\n        let color, (loc:_[]), v, ct = data.[i]\r\n        if ct = time then\r\n          ( match t.detailsSelector with \r\n            | Some os -> [ \"details\", os v |> Seq.map string |> String.concat \"\" |> box ] \r\n            | _ -> [] ) @\r\n          [ \"radius\", box (t.sizeSelector v)\r\n            \"borderWidth\", box \"1px\"\r\n            \"fillKey\", box (sprintf \"item%d\" (color % fills.Length))\r\n            \"info\", box (defaultArg (Map.tryFind (sprintf \"%O, %O\" loc.[0] loc.[1]) infos) \"\")\r\n            \"latitude\", box loc.[0]\r\n            \"longitude\", box loc.[1] ]\r\n          |> JsInterop.createObj |> res.Add\r\n      res.ToArray()\r\n\r\n    async { \r\n      // Get data and calculate locations\r\n      let! data = t.data.data |> Async.AwaitFuture\r\n      let locs = Array.zeroCreate data.Length\r\n      for i in 0 .. data.Length - 1 do\r\n        let! loc = t.locSelector (snd data.[i])\r\n        locs.[i] <- loc\r\n\r\n      // Coloring keys based on locations\r\n      let colorLookup = locs |> Seq.distinct |> Seq.mapi (fun i l -> List.ofArray l, i) |> Map.ofSeq\r\n      let data = Array.map2 (fun (_, v) locs -> colorLookup.[List.ofArray locs], locs, v, t.timeSelector v) data locs      \r\n      let infosLookup = data |> Seq.groupBy (fun (_, loc, _, _) -> sprintf \"%O, %O\" loc.[0] loc.[1]) |> Seq.map (fun (loc, vals) ->  \r\n        loc, vals |> Seq.map (fun (_, _, v, _) -> t.infoSelector v) |> Seq.distinct |> String.concat \"<br />\") |> Map.ofSeq\r\n      \r\n      // Time range\r\n      let times = data |> Array.map (fun  (_, _, _, t) -> t) |> Seq.distinct |> Seq.sort |> Array.ofSeq\r\n      let lo, hi = Seq.min times, Seq.max times\r\n\r\n      let player = document.getElementById(id + \"_player\") :?> HTMLInputElement\r\n      let btn = document.getElementById(id + \"_btn\") :?> HTMLAnchorElement\r\n      if times.Length = 1 then \r\n        player.style.display <- \"none\"\r\n        btn.style.display <- \"none\"\r\n      player.min <- string 0\r\n      player.value <- string 0\r\n      player.max <- string (times.Length - 1)\r\n      let render () =\r\n        let y = times.[int player.value]\r\n        let o = objects data infosLookup y\r\n        h?h2 [] [text (t.titleTemplate.Replace(\"%title\", string y))] |> renderTo (document.getElementById(id + \"_title\"))\r\n        let config = \r\n          { key = System.Func<_, _>(fun data -> jsonStringify [| getProp data \"latitude\"; getProp data \"longitude\" |])\r\n            popupTemplate = System.Func<_, _, _>(fun geo data -> \r\n              match t.detailsSelector with\r\n              | None -> sprintf \"<div style='pointer-events:none' class='hoverinfo'>%s</div>\" (getProp data \"info\")\r\n              | Some _ -> sprintf \"<div style='pointer-events:none' class='hoverinfo'><strong>%s</strong><br /> %s </div>\" (getProp data \"info\") (getProp data \"details\")) }\r\n        map.bubbles(o, config) \r\n\r\n      let mutable autoPlay = true\r\n      let startPlay () = async {\r\n        while autoPlay do\r\n          let value = int player.value\r\n          render()\r\n          player.value <- string (if value + 1 = times.Length then 0 else value + 1)\r\n          do! Async.Sleep(if value + 1 = times.Length then t.overflowDelay else t.delay) } |> Async.StartImmediate\r\n      \r\n      player.onchange <- fun e ->\r\n        autoPlay <- false\r\n        h?i [\"class\" => \"fa fa-play\"] [] |> renderTo btn\r\n        render() |> box\r\n      player.oninput <- player.onchange\r\n\r\n      btn.onclick <- fun e ->\r\n        autoPlay <- not autoPlay\r\n        h?i [\"class\" => if autoPlay then \"fa fa-pause\" else \"fa fa-play\"] [] |> renderTo btn\r\n        if autoPlay then startPlay()\r\n        box ()\r\n\r\n      startPlay() } |> Async.StartImmediate\r\n\r\n(*\r\n\r\n\r\n    let row (el:string) k (things:seq<DomNode>) =\r\n      h?tr [] [ \r\n        if t.showKey then yield h?(el) [] [text k]\r\n        for t in things -> h?(el) [] [t] \r\n      ]\r\n\r\n    let render nd = \r\n      nd |> renderTo (document.getElementById(outputId))\r\n\r\n    let makeTable k header body = \r\n      h?table [\"class\" => \"table table-striped\"] [\r\n        if not (String.IsNullOrWhiteSpace t.data.seriesName) then\r\n          yield h?caption [] [ text t.data.seriesName ]\r\n        yield h?thead [] [ row \"th\" k header ]\r\n        yield h?tbody [] body\r\n      ]\r\n\r\n    // [ h?tr [] [ h?td [\"colspan\" => \"2\"] [text \"Loading data...\"] ] ]\r\n    // |> makeTable t.data.keyName [ t.data.valueName ]\r\n    // |> render\r\n\r\n    //invokeBlockCallback()\r\n\r\n    let formatAdded o = \r\n      // Did someone say hack..?\r\n      let isSeries = \r\n        [ for kv in properties o -> kv.key ] = \r\n          [\"data\"; \"keyName\"; \"valueName\"; \"seriesName\"]\r\n      if isSeries then\r\n        let mutable result = unbox null\r\n        Async.StartWithContinuations\r\n          ( (unbox<series<int, DomNode>> o).data,\r\n            (fun r -> result <- r), ignore, ignore )\r\n        h?span [] (List.ofArray (Array.map snd result))\r\n      else text (o.ToString())\r\n\r\n    async {\r\n      try\r\n        let! vs = t.data.data\r\n\r\n        let filteredProperties o =\r\n          properties o |> Array.filter (fun kv -> not (t.hiddenColumns.Contains kv.key))\r\n\r\n        let _, first = vs |> Seq.head\r\n        let headers = \r\n          [ if isObject first then for kv in filteredProperties first -> text kv.key\r\n            else yield text t.data.valueName \r\n            for k, _ in t.addedColumns -> text k ]\r\n      \r\n        [ for k, v in vs ->\r\n            let formattedVals =\r\n              [ if isObject v then for kv in filteredProperties v -> text (unbox kv.value)\r\n                elif not (isNumber v) then yield text (v.ToString())\r\n                elif isNaN (unbox v) then yield text \"\"\r\n                else yield unbox v  // formatNumber (unbox v) \"0,0.00\" ]\r\n                for _, f in t.addedColumns -> formatAdded (f v) ] \r\n            row \"td\" (unbox k) formattedVals ]\r\n        |> makeTable t.data.keyName headers\r\n        |> render \r\n      with e ->\r\n        console.log(\"Getting data for table failed: %O\", e) }\r\n    |> Async.StartImmediate\r\n\r\n    \r\n    *)"]}