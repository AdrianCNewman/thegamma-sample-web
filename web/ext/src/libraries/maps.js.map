{"version":3,"sources":["../../../src/libraries/maps.fs"],"names":[],"mappings":"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","file":"maps.js","sourceRoot":"c:/tomas/public/thegamma/thegamma-script/out/src/libraries","sourcesContent":["namespace TheGamma.Maps\r\n\r\nopen System\r\nopen TheGamma\r\nopen TheGamma.Series\r\nopen TheGamma.Html\r\nopen Fable.Import.Browser\r\nopen Fable.Core\r\n\r\n// COPY & PASTE FROM EXTENSIONS.FS\r\n\r\ntype Http =\r\n  /// Send HTTP request asynchronously\r\n  /// (does not handle errors properly)\r\n  static member Request(meth, url, ?data, ?cookies) =\r\n    Async.FromContinuations(fun (cont, _, _) ->\r\n      let xhr = XMLHttpRequest.Create()\r\n      xhr.``open``(meth, url, true)\r\n      match cookies with \r\n      | Some cookies when cookies <> \"\" -> xhr.setRequestHeader(\"X-Cookie\", cookies)\r\n      | _ -> ()\r\n      xhr.onreadystatechange <- fun _ ->\r\n        if xhr.readyState > 3. && xhr.status = 200. then\r\n          cont(xhr.responseText)\r\n        obj()\r\n      xhr.send(defaultArg data \"\") )\r\n\r\ntype Future<'T> = \r\n  abstract Then : ('T -> unit) -> unit\r\n\r\nmodule AsyncHelpers = \r\n  type Microsoft.FSharp.Control.Async with\r\n    static member AwaitFuture (f:Future<'T>) = Async.FromContinuations(fun (cont, _, _) ->\r\n      f.Then(cont))\r\n    static member Future (n:string) op start = \r\n      let mutable res = Choice1Of3()\r\n      let mutable handlers = []\r\n      let mutable running = false\r\n\r\n      let trigger h = \r\n        match res with\r\n        | Choice1Of3 () -> handlers <- h::handlers \r\n        | Choice2Of3 v -> h v\r\n        | Choice3Of3 e -> raise e\r\n\r\n      let ensureStarted() = \r\n        if not running then \r\n          running <- true\r\n          async { try \r\n                    let! r = op\r\n                    res <- Choice2Of3 r                  \r\n                  with e ->\r\n                    res <- Choice3Of3 e\r\n                  for h in handlers do trigger h } |> Async.StartImmediate\r\n      if start = true then ensureStarted()\r\n\r\n      { new Future<_> with\r\n          member x.Then(f) = \r\n            ensureStarted()\r\n            trigger f }\r\n\r\n    static member AsFuture n op = Async.Future n op false\r\n    static member StartAsFuture n op = Async.Future n op true\r\n\r\nopen AsyncHelpers\r\n\r\ntype GeographyConfig = \r\n  { popupOnHover : bool\r\n    highlightOnHover : bool }\r\n  \r\ntype DatamapConfig = \r\n  { element : HTMLElement\r\n    scope : string\r\n    geographyConfig : GeographyConfig\r\n    fills: obj\r\n    data: obj }\r\n\r\ntype BubblesConfig = \r\n  { popupTemplate : System.Func<obj, obj, string>\r\n    key : System.Func<obj, string> }\r\n\r\ntype IDatamap = \r\n  abstract bubbles : data:obj * config:BubblesConfig -> unit\r\n\r\nmodule JsDatamap = \r\n  [<Emit(\"new Datamap($0)\")>]\r\n  let create(config:DatamapConfig) : IDatamap = failwith \"JS\"\r\n\r\nmodule JsHelpers = \r\n  [<Emit(\"JSON.parse($0)\")>]\r\n  let jsonParse<'R> (str:string) : 'R = failwith \"JS Only\"\r\n\r\n  [<Emit(\"JSON.stringify($0)\")>]\r\n  let jsonStringify json : string = failwith \"JS Only\"\r\n\r\n  [<Emit(\"$0[$1]\")>]\r\n  let getProp (o:obj) (prop:string) : 'T = failwith \"JS\"\r\n\r\nopen JsHelpers\r\n\r\n(*\r\nvar bombMap = new Datamap({\r\n    element: document.getElementById('map'),\r\n    scope: 'world',\r\n    geographyConfig: {\r\n        popupOnHover: false,\r\n        highlightOnHover: false\r\n    },\r\n    fills: {\r\n        'USA': '#1f77b4',\r\n        'RUS': '#9467bd',\r\n        'PRK': '#ff7f0e',\r\n        'PRC': '#2ca02c',\r\n        'IND': '#e377c2',\r\n        'GBR': '#8c564b',\r\n        'FRA': '#d62728',\r\n        'PAK': '#7f7f7f',\r\n        defaultFill: '#EDDC4E'\r\n    },\r\n    data: {\r\n        'RUS': {fillKey: 'RUS'},\r\n        'PRK': {fillKey: 'PRK'},\r\n        'PRC': {fillKey: 'PRC'},\r\n        'IND': {fillKey: 'IND'},\r\n        'GBR': {fillKey: 'GBR'},\r\n        'FRA': {fillKey: 'FRA'},\r\n        'PAK': {fillKey: 'PAK'},\r\n        'USA': {fillKey: 'USA'}\r\n    }\r\n});\r\n function bombs() { return [{\r\n    name: 'Joe 4',\r\n    radius: Math.random() * 100,\r\n    yield: 400,\r\n    country: 'USSR',\r\n    fillKey: 'RUS',\r\n    significance: 'First fusion weapon test by the USSR (not \"staged\")',\r\n    date: '1953-08-12',\r\n    latitude: 50.07,\r\n    longitude: 78.43\r\n  },{\r\n    name: 'RDS-37',\r\n    radius: Math.random() * 100,\r\n    yield: 1600,\r\n    country: 'USSR',\r\n    fillKey: 'RUS',\r\n    significance: 'First \"staged\" thermonuclear weapon test by the USSR (deployable)',\r\n    date: '1955-11-22',\r\n    latitude: 50.07,\r\n    longitude: 78.43\r\n  },{\r\n    name: 'Tsar Bomba',\r\n    radius: Math.random() * 100,\r\n    yield: 50000,\r\n    country: 'USSR',\r\n    fillKey: 'RUS',\r\n    significance: 'Largest thermonuclear weapon ever testedï¿½scaled down from its initial 100 Mt design by 50%',\r\n    date: '1961-10-31',\r\n    latitude: 73.482,\r\n    longitude: 54.5854\r\n  }\r\n  ];  }\r\nbombMap.bubbles(bombs(), {\r\n    popupTemplate: function (geo, data) {\r\n            return ['<div class=\"hoverinfo\">' +  data.name,\r\n            '<br/>Payload: ' +  data.yield + ' kilotons',\r\n            '<br/>Country: ' +  data.country + '',\r\n            '<br/>Date: ' +  data.date + '',\r\n            '</div>'].join('');\r\n    }\r\n});\r\nsetInterval(function() {\r\n\tbombMap.bubbles(bombs(), {\r\n\t    popupTemplate: function (geo, data) {\r\n\t            return ['<div class=\"hoverinfo\">' +  data.name,\r\n\t            '<br/>Payload: ' +  data.yield + ' kilotons',\r\n\t            '<br/>Country: ' +  data.country + '',\r\n\t            '<br/>Date: ' +  data.date + '',\r\n\t            '</div>'].join('');\r\n\t    }\r\n\t});\r\n}, 5000);\r\n*)\r\nmodule GeoGlobals = \r\n  type Locations = \r\n    { country : string\r\n      coordinates : float[] }\r\n\r\n  let locations = \r\n    async { \r\n      let! json = Http.Request(\"GET\", \"/data/locations.json\") \r\n      let lookup = \r\n        jsonParse<Locations[]> json \r\n        |> Array.map (fun l -> l.country, l.coordinates)\r\n        |> Map.ofArray\r\n      return lookup } |> Async.StartAsFuture \"locations\"\r\n\r\ntype geo =\r\n  static member lookup (country:string) = async {\r\n    let! locs = GeoGlobals.locations |> Async.AwaitFuture\r\n    return defaultArg (locs.TryFind(country)) [| 0.0; 0.0 |] }\r\n\r\ntype math = \r\n  static member sqrt(f:float) = sqrt f\r\n  static member pow(f:float, k) = Math.Pow(f, k)\r\n  static member log(f:float, ?b) = match b with Some b -> Math.Log(f, b) | _ -> log f\r\n  static member min(f1:float, f2:float) = min f1 f2\r\n  static member max(f1:float, f2:float) = max f1 f2\r\n  static member add(f1:float, f2:float) = f1 + f2\r\n  static member times(f1:float, f2:float) = f1 * f2\r\n  static member sub(f1:float, f2:float) = f1 - f2\r\n  static member div(f1:float, f2:float) = f1 / f2\r\n\r\n\r\ntype timeline<'k,'v> =\r\n  { data : series<'k,'v> \r\n    colors : string[]\r\n    titleTemplate : string\r\n    defaultFill : string\r\n    delay : int\r\n    overflowDelay : int\r\n    infoSelector : 'v -> string\r\n    locSelector : 'v -> Async<int[]>\r\n    sizeSelector : 'v -> float\r\n    detailsSelector : option<'v -> obj[]>\r\n    timeSelector : 'v -> int }\r\n\r\n  static member create(data:series<_, _>) =\r\n    { timeline.data = data \r\n      colors = [| \"red\" |]\r\n      defaultFill = \"blue\"\r\n      delay = 750\r\n      detailsSelector = None\r\n      overflowDelay = 2000\r\n      titleTemplate = \"%title\"\r\n      infoSelector = fun _ -> \"\"\r\n      timeSelector = fun _ -> 0 \r\n      sizeSelector = fun _ -> 10.0\r\n      locSelector = fun _ -> failwith \"!\" }\r\n\r\n  member t.set(?fill, ?colors, ?title, ?delay, ?overflowDelay, ?details) = \r\n    { t with \r\n        colors = defaultArg colors t.colors; defaultFill = defaultArg fill t.defaultFill \r\n        titleTemplate = defaultArg title t.titleTemplate; delay = defaultArg delay t.delay\r\n        detailsSelector = match details with Some d -> Some d | _ -> t.detailsSelector\r\n        overflowDelay = defaultArg overflowDelay t.overflowDelay  }\r\n\r\n  member t.using(coordinates, time, size, info) = \r\n    { t with \r\n        locSelector = coordinates; timeSelector = time; sizeSelector = size \r\n        infoSelector = info }\r\n\r\n  member t.show(outputId) =\r\n    let id = \"map\" + DateTime.Now.Ticks.ToString()\r\n    h?div [\"class\" => \"map\"] [\r\n      h?div [\"id\" => id + \"_title\"] [text \"\"]\r\n      h?div [\"id\" => id; \"class\" => \"mapcontainer\" ] [] \r\n      h?div [] [\r\n        h?div [\"class\" => \"buttons\"] [ h?a [\"id\" => id + \"_btn\"] [ h?i [\"class\" => \"fa fa-pause\"] [] ] ]\r\n        h?input [\"id\" => id + \"_player\"; \"type\" => \"range\"] []\r\n      ]\r\n    ] |> renderTo (document.getElementById(outputId))\r\n\r\n    let fills = t.colors |> Array.mapi (fun i c -> sprintf \"item%d\" i, box c)\r\n    let map = \r\n      { element = document.getElementById(id)\r\n        scope = \"world\"\r\n        geographyConfig = { popupOnHover = false;  highlightOnHover = false }\r\n        fills = JsInterop.createObj ((\"defaultFill\", box t.defaultFill)::(List.ofArray fills))\r\n        data = JsInterop.createObj [] }\r\n      |> JsDatamap.create\r\n\r\n    let objects (data:_[]) infos time = \r\n      let res = ResizeArray<_>()\r\n      for i in 0 .. data.Length - 1 do\r\n        let color, (loc:_[]), v, ct = data.[i]\r\n        if ct = time then\r\n          ( match t.detailsSelector with \r\n            | Some os -> [ \"details\", os v |> Seq.map string |> String.concat \"\" |> box ] \r\n            | _ -> [] ) @\r\n          [ \"radius\", box (t.sizeSelector v)\r\n            \"borderWidth\", box \"1px\"\r\n            \"fillKey\", box (sprintf \"item%d\" (color % fills.Length))\r\n            \"info\", box (defaultArg (Map.tryFind (sprintf \"%O, %O\" loc.[0] loc.[1]) infos) \"\")\r\n            \"latitude\", box loc.[0]\r\n            \"longitude\", box loc.[1] ]\r\n          |> JsInterop.createObj |> res.Add\r\n      res.ToArray()\r\n\r\n    async { \r\n      // Get data and calculate locations\r\n      let! data = t.data.data \r\n      let locs = Array.zeroCreate data.Length\r\n      for i in 0 .. data.Length - 1 do\r\n        let! loc = t.locSelector (snd data.[i])\r\n        locs.[i] <- loc\r\n\r\n      // Coloring keys based on locations\r\n      let colorLookup = locs |> Seq.distinct |> Seq.mapi (fun i l -> List.ofArray l, i) |> Map.ofSeq\r\n      let data = Array.map2 (fun (_, v) locs -> colorLookup.[List.ofArray locs], locs, v, t.timeSelector v) data locs      \r\n      let infosLookup = data |> Seq.groupBy (fun (_, loc, _, _) -> sprintf \"%O, %O\" loc.[0] loc.[1]) |> Seq.map (fun (loc, vals) ->  \r\n        loc, vals |> Seq.map (fun (_, _, v, _) -> t.infoSelector v) |> Seq.distinct |> String.concat \"<br />\") |> Map.ofSeq\r\n      \r\n      // Time range\r\n      let times = data |> Array.map (fun  (_, _, _, t) -> t) |> Seq.distinct |> Seq.sort |> Array.ofSeq\r\n      let lo, hi = Seq.min times, Seq.max times\r\n\r\n      let player = document.getElementById(id + \"_player\") :?> HTMLInputElement\r\n      let btn = document.getElementById(id + \"_btn\") :?> HTMLAnchorElement\r\n      if times.Length = 1 then \r\n        player.style.display <- \"none\"\r\n        btn.style.display <- \"none\"\r\n      player.min <- string 0\r\n      player.value <- string 0\r\n      player.max <- string (times.Length - 1)\r\n      let render () =\r\n        let y = times.[int player.value]\r\n        let o = objects data infosLookup y\r\n        h?h2 [] [text (t.titleTemplate.Replace(\"%title\", string y))] |> renderTo (document.getElementById(id + \"_title\"))\r\n        let config = \r\n          { key = System.Func<_, _>(fun data -> jsonStringify [| getProp data \"latitude\"; getProp data \"longitude\" |])\r\n            popupTemplate = System.Func<_, _, _>(fun geo data -> \r\n              match t.detailsSelector with\r\n              | None -> sprintf \"<div style='pointer-events:none' class='hoverinfo'>%s</div>\" (getProp data \"info\")\r\n              | Some _ -> sprintf \"<div style='pointer-events:none' class='hoverinfo'><strong>%s</strong><br /> %s </div>\" (getProp data \"info\") (getProp data \"details\")) }\r\n        map.bubbles(o, config) \r\n\r\n      let mutable autoPlay = true\r\n      let startPlay () = async {\r\n        while autoPlay do\r\n          let value = int player.value\r\n          render()\r\n          player.value <- string (if value + 1 = times.Length then 0 else value + 1)\r\n          do! Async.Sleep(if value + 1 = times.Length then t.overflowDelay else t.delay) } |> Async.StartImmediate\r\n      \r\n      player.onchange <- fun e ->\r\n        autoPlay <- false\r\n        h?i [\"class\" => \"fa fa-play\"] [] |> renderTo btn\r\n        render() |> box\r\n      player.oninput <- player.onchange\r\n\r\n      btn.onclick <- fun e ->\r\n        autoPlay <- not autoPlay\r\n        h?i [\"class\" => if autoPlay then \"fa fa-pause\" else \"fa fa-play\"] [] |> renderTo btn\r\n        if autoPlay then startPlay()\r\n        box ()\r\n\r\n      startPlay() } |> Async.StartImmediate\r\n\r\n(*\r\n\r\n\r\n    let row (el:string) k (things:seq<DomNode>) =\r\n      h?tr [] [ \r\n        if t.showKey then yield h?(el) [] [text k]\r\n        for t in things -> h?(el) [] [t] \r\n      ]\r\n\r\n    let render nd = \r\n      nd |> renderTo (document.getElementById(outputId))\r\n\r\n    let makeTable k header body = \r\n      h?table [\"class\" => \"table table-striped\"] [\r\n        if not (String.IsNullOrWhiteSpace t.data.seriesName) then\r\n          yield h?caption [] [ text t.data.seriesName ]\r\n        yield h?thead [] [ row \"th\" k header ]\r\n        yield h?tbody [] body\r\n      ]\r\n\r\n    // [ h?tr [] [ h?td [\"colspan\" => \"2\"] [text \"Loading data...\"] ] ]\r\n    // |> makeTable t.data.keyName [ t.data.valueName ]\r\n    // |> render\r\n\r\n    //invokeBlockCallback()\r\n\r\n    let formatAdded o = \r\n      // Did someone say hack..?\r\n      let isSeries = \r\n        [ for kv in properties o -> kv.key ] = \r\n          [\"data\"; \"keyName\"; \"valueName\"; \"seriesName\"]\r\n      if isSeries then\r\n        let mutable result = unbox null\r\n        Async.StartWithContinuations\r\n          ( (unbox<series<int, DomNode>> o).data,\r\n            (fun r -> result <- r), ignore, ignore )\r\n        h?span [] (List.ofArray (Array.map snd result))\r\n      else text (o.ToString())\r\n\r\n    async {\r\n      try\r\n        let! vs = t.data.data\r\n\r\n        let filteredProperties o =\r\n          properties o |> Array.filter (fun kv -> not (t.hiddenColumns.Contains kv.key))\r\n\r\n        let _, first = vs |> Seq.head\r\n        let headers = \r\n          [ if isObject first then for kv in filteredProperties first -> text kv.key\r\n            else yield text t.data.valueName \r\n            for k, _ in t.addedColumns -> text k ]\r\n      \r\n        [ for k, v in vs ->\r\n            let formattedVals =\r\n              [ if isObject v then for kv in filteredProperties v -> text (unbox kv.value)\r\n                elif not (isNumber v) then yield text (v.ToString())\r\n                elif isNaN (unbox v) then yield text \"\"\r\n                else yield unbox v  // formatNumber (unbox v) \"0,0.00\" ]\r\n                for _, f in t.addedColumns -> formatAdded (f v) ] \r\n            row \"td\" (unbox k) formattedVals ]\r\n        |> makeTable t.data.keyName headers\r\n        |> render \r\n      with e ->\r\n        console.log(\"Getting data for table failed: %O\", e) }\r\n    |> Async.StartImmediate\r\n\r\n    \r\n    *)"]}