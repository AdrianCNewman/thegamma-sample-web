{"version":3,"sources":["../../../src/libraries/tables.fs"],"names":[],"mappings":"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","file":"tables.js","sourceRoot":"C:/Tomas/Public/thegamma/thegamma-script/out/src/libraries","sourcesContent":["namespace TheGamma\r\n\r\nopen System\r\nopen TheGamma\r\nopen TheGamma.Common\r\nopen TheGamma.Series\r\nopen TheGamma.Html\r\nopen Fable.Import.Browser\r\n\r\ntype Emit = Fable.Core.EmitAttribute\r\n\r\nmodule TableHelpers =\r\n  //[<Emit(\"blockCallback()\")>]\r\n  //let invokeBlockCallback() : unit = failwith \"!\"\r\n\r\n  [<Emit(\"numeral($0).format($1)\")>]\r\n  let formatNumber (n:float) (format:string) : string = failwith \"!\"\r\n\r\n  [<Emit(\"(typeof($0)=='number')\")>]\r\n  let isNumber(n:obj) : bool = failwith \"!\"\r\n\r\n  [<Emit(\"(typeof($0)=='object')\")>]\r\n  let isObject(n:obj) : bool = failwith \"!\"\r\n\r\n  [<Emit(\"isNaN($0)\")>]\r\n  let isNaN(n:float) : bool = failwith \"!\"\r\n\r\n  type KeyValue = \r\n    abstract key : string\r\n    abstract value : obj\r\n\r\n  [<Emit(\"(function(o) { return Object.keys(o).map(function(k) { return {\\\"key\\\":k, \\\"value\\\":o[k] }; }); })($0)\")>]\r\n  let properties(o:obj) : KeyValue[] = failwith \"!\"\r\n\r\nopen TableHelpers\r\n\r\ntype html =\r\n  static member img(url:string) = \r\n    box (h?img [ \"src\" => url ] [])\r\n\r\ntype table<'k,'v> =\r\n  { data : series<'k,'v>\r\n    showKey : bool \r\n    hiddenColumns : Set<string>\r\n    addedColumns : list<string * ('v -> obj)> }\r\n\r\n  static member create(data:series<_, _>) =\r\n    { table.data = data\r\n      hiddenColumns = Set.empty\r\n      addedColumns = []\r\n      showKey = true }\r\n\r\n  member t.set(?title:string, ?showKey:bool) = \r\n    { table.data = t.data.set(t.data.data, seriesName=defaultArg title t.data.seriesName)\r\n      hiddenColumns = t.hiddenColumns\r\n      addedColumns = t.addedColumns\r\n      showKey = defaultArg showKey t.showKey }\r\n\r\n  member t.hideColumns(names:string[]) =\r\n    { t with hiddenColumns = Set.ofArray names }\r\n\r\n  member t.addColumn(name, f) =\r\n    { t with addedColumns = (name, f)::t.addedColumns }\r\n\r\n  member t.show(outputId) =\r\n    let row (el:string) k (things:seq<DomNode>) =\r\n      h?tr [] [ \r\n        if t.showKey then yield h?(el) [] [text k]\r\n        for t in things -> h?(el) [] [t] \r\n      ]\r\n\r\n    let render nd = \r\n      nd |> renderTo (document.getElementById(outputId))\r\n\r\n    let makeTable k header body = \r\n      h?table [\"class\" => \"table table-striped\"] [\r\n        if not (String.IsNullOrWhiteSpace t.data.seriesName) then\r\n          yield h?caption [] [ text t.data.seriesName ]\r\n        yield h?thead [] [ row \"th\" k header ]\r\n        yield h?tbody [] body\r\n      ]\r\n\r\n    // [ h?tr [] [ h?td [\"colspan\" => \"2\"] [text \"Loading data...\"] ] ]\r\n    // |> makeTable t.data.keyName [ t.data.valueName ]\r\n    // |> render\r\n\r\n    //invokeBlockCallback()\r\n\r\n    let formatAdded o = \r\n      // Did someone say hack..?\r\n      let isSeries = \r\n        [ for kv in properties o -> kv.key ] = \r\n          [\"data\"; \"keyName\"; \"valueName\"; \"seriesName\"]\r\n      if isSeries then\r\n        let mutable result = unbox null\r\n        (unbox<series<int, DomNode>> o).data.Then(fun r -> result <- r)\r\n        h?span [] (List.ofArray (Array.map snd result))\r\n      else text (o.ToString())\r\n\r\n    async {\r\n      try\r\n        let! vs = t.data.data |> Async.AwaitFuture\r\n\r\n        let filteredProperties o =\r\n          properties o |> Array.filter (fun kv -> not (t.hiddenColumns.Contains kv.key))\r\n\r\n        let _, first = vs |> Seq.head\r\n        let headers = \r\n          [ if isObject first then for kv in filteredProperties first -> text kv.key\r\n            else yield text t.data.valueName \r\n            for k, _ in t.addedColumns -> text k ]\r\n      \r\n        [ for k, v in vs ->\r\n            let formattedVals =\r\n              [ if isObject v then for kv in filteredProperties v -> text (unbox kv.value)\r\n                elif not (isNumber v) then yield text (v.ToString())\r\n                elif isNaN (unbox v) then yield text \"\"\r\n                else yield unbox v  // formatNumber (unbox v) \"0,0.00\" ]\r\n                for _, f in t.addedColumns -> formatAdded (f v) ] \r\n            row \"td\" (unbox k) formattedVals ]\r\n        |> makeTable t.data.keyName headers\r\n        |> render \r\n      with e ->\r\n        console.log(\"Getting data for table failed: %O\", e) }\r\n    |> Async.StartImmediate\r\n\r\ntype empty() =\r\n  static member create() = empty()\r\n  member x.show(outputId) =\r\n    h?div [\"class\" => \"loading\"] [ h?p [] [ text \"No output produced.\" ] ]\r\n    |> renderTo (document.getElementById(outputId))\r\n"]}