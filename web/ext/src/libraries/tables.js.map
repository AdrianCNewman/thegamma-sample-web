{"version":3,"sources":["../../../src/libraries/tables.fs"],"names":[],"mappings":"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","file":"tables.js","sourceRoot":"c:/tomas/public/thegamma/thegamma-script/out/src/libraries","sourcesContent":["namespace TheGamma\r\n\r\nopen System\r\nopen TheGamma\r\nopen TheGamma.Series\r\nopen TheGamma.Html\r\nopen Fable.Import.Browser\r\n\r\ntype Emit = Fable.Core.EmitAttribute\r\n\r\nmodule TableHelpers =\r\n  //[<Emit(\"blockCallback()\")>]\r\n  //let invokeBlockCallback() : unit = failwith \"!\"\r\n\r\n  [<Emit(\"numeral($0).format($1)\")>]\r\n  let formatNumber (n:float) (format:string) : string = failwith \"!\"\r\n\r\n  [<Emit(\"(typeof($0)=='number')\")>]\r\n  let isNumber(n:obj) : bool = failwith \"!\"\r\n\r\n  [<Emit(\"(typeof($0)=='object')\")>]\r\n  let isObject(n:obj) : bool = failwith \"!\"\r\n\r\n  [<Emit(\"isNaN($0)\")>]\r\n  let isNaN(n:float) : bool = failwith \"!\"\r\n\r\n  type KeyValue = \r\n    abstract key : string\r\n    abstract value : obj\r\n\r\n  [<Emit(\"(function(o) { return Object.keys(o).map(function(k) { return {\\\"key\\\":k, \\\"value\\\":o[k] }; }); })($0)\")>]\r\n  let properties(o:obj) : KeyValue[] = failwith \"!\"\r\n\r\nopen TableHelpers\r\n\r\ntype html =\r\n  static member img(url:string) = \r\n    box (h?img [ \"src\" => url ] [])\r\n\r\ntype table<'k,'v> =\r\n  { data : series<'k,'v>\r\n    showKey : bool \r\n    hiddenColumns : Set<string>\r\n    addedColumns : list<string * ('v -> obj)> }\r\n\r\n  static member create(data:series<_, _>) =\r\n    { table.data = data\r\n      hiddenColumns = Set.empty\r\n      addedColumns = []\r\n      showKey = true }\r\n\r\n  member t.set(?title:string, ?showKey:bool) = \r\n    { table.data = t.data.set(t.data.data, seriesName=defaultArg title t.data.seriesName)\r\n      hiddenColumns = t.hiddenColumns\r\n      addedColumns = t.addedColumns\r\n      showKey = defaultArg showKey t.showKey }\r\n\r\n  member t.hideColumns(names:string[]) =\r\n    { t with hiddenColumns = Set.ofArray names }\r\n\r\n  member t.addColumn(name, f) =\r\n    { t with addedColumns = (name, f)::t.addedColumns }\r\n\r\n  member t.show(outputId) =\r\n    let row (el:string) k (things:seq<DomNode>) =\r\n      h?tr [] [ \r\n        if t.showKey then yield h?(el) [] [text k]\r\n        for t in things -> h?(el) [] [t] \r\n      ]\r\n\r\n    let render nd = \r\n      nd |> renderTo (document.getElementById(outputId))\r\n\r\n    let makeTable k header body = \r\n      h?table [\"class\" => \"table table-striped\"] [\r\n        if not (String.IsNullOrWhiteSpace t.data.seriesName) then\r\n          yield h?caption [] [ text t.data.seriesName ]\r\n        yield h?thead [] [ row \"th\" k header ]\r\n        yield h?tbody [] body\r\n      ]\r\n\r\n    // [ h?tr [] [ h?td [\"colspan\" => \"2\"] [text \"Loading data...\"] ] ]\r\n    // |> makeTable t.data.keyName [ t.data.valueName ]\r\n    // |> render\r\n\r\n    //invokeBlockCallback()\r\n\r\n    let formatAdded o = \r\n      // Did someone say hack..?\r\n      let isSeries = \r\n        [ for kv in properties o -> kv.key ] = \r\n          [\"data\"; \"keyName\"; \"valueName\"; \"seriesName\"]\r\n      if isSeries then\r\n        let mutable result = unbox null\r\n        Async.StartWithContinuations\r\n          ( (unbox<series<int, DomNode>> o).data,\r\n            (fun r -> result <- r), ignore, ignore )\r\n        h?span [] (List.ofArray (Array.map snd result))\r\n      else text (o.ToString())\r\n\r\n    async {\r\n      try\r\n        let! vs = t.data.data\r\n\r\n        let filteredProperties o =\r\n          properties o |> Array.filter (fun kv -> not (t.hiddenColumns.Contains kv.key))\r\n\r\n        let _, first = vs |> Seq.head\r\n        let headers = \r\n          [ if isObject first then for kv in filteredProperties first -> text kv.key\r\n            else yield text t.data.valueName \r\n            for k, _ in t.addedColumns -> text k ]\r\n      \r\n        [ for k, v in vs ->\r\n            let formattedVals =\r\n              [ if isObject v then for kv in filteredProperties v -> text (unbox kv.value)\r\n                elif not (isNumber v) then yield text (v.ToString())\r\n                elif isNaN (unbox v) then yield text \"\"\r\n                else yield unbox v  // formatNumber (unbox v) \"0,0.00\" ]\r\n                for _, f in t.addedColumns -> formatAdded (f v) ] \r\n            row \"td\" (unbox k) formattedVals ]\r\n        |> makeTable t.data.keyName headers\r\n        |> render \r\n      with e ->\r\n        console.log(\"Getting data for table failed: %O\", e) }\r\n    |> Async.StartImmediate\r\n\r\ntype empty() =\r\n  static member create() = empty()\r\n  member x.show(outputId) =\r\n    h?div [\"class\" => \"loading\"] [ h?p [] [ text \"No output produced.\" ] ]\r\n    |> renderTo (document.getElementById(outputId))\r\n"]}